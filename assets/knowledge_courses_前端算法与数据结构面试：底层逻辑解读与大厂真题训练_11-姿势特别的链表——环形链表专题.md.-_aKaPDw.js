import{_ as s,c as a,o as t,V as l}from"./chunks/framework.YbGCv4uC.js";const i="/assets/1.eb7BWpXU.image",n="/assets/2.5PWczU2C.image",h="/assets/3.3lNS_akG.image",k="/assets/4.FNyR1EtJ.image",e="/assets/6.nSdBtzwp.image",p="data:application/octet-stream;base64,iVBORw0KGgoAAAANSUhEUgAAAEEAAABBCAYAAACO98lFAAAHcklEQVR4XuVceWxMXxT+niVIg1ClCJGIoNqUKGoPGmqXqC5KbEEoqSX4AylqjdiX1F5bLbGWCGktRayh2hBEtJbEFiS2+MPyfvmOzPxmptOZ92Z5r52e5GWm7bv3nPu9++495zvnVlFVVYWf5erVq3j8+DHevn2Ljx8/yvXp0yd8//4d7dq1w927d1GvXj0EBwfLJ68mTZogMjISbdu29bN1gOIPED5//gwO/Nq1a/LZo0cPdOjQATVr1rQOkgOtXbu2dYAExQIQP3/+/ImLFy+iqKhI2luuypUr+xwUn4JAo0+ePIlnz55Zje7evbtXRn/9+tUO0P79+2P48OFo06aNV/3aNvYJCJzOmzdvRsOGDTF27Fi0atXKZwY6dkRdW7ZsQYMGDZCSkoKmTZt6rcsrEJ4+fYpNmzaBywoNCgsL89ogrR1cvnxZgOeaMn36dLtXS2sflvs8BmHt2rW4f/++GNCpUye9en12/+nTpwWMCRMmIDEx0aN+PQJh1KhRGD9+PHr37u2RUn802rFjB968eYO0tDTd3esCobi4GCNHjkRmZiZatmypW5m/G5w9exZHjhzB/v37danSDEJubi62b9+OQ4cOwR/blC6rXdz85MkTjBs3Tuxs1qyZpm41gVBYWIhdu3Zhw4YNmjo1+6Y/f/5g8ODBAoStL1KaXW5B4AzgNFu/fr3ZY9Otf9CgQdi5cydCQ0NdtnUJAteAefPm4ejRo7oNKAsNfvz4AQLB7dSVuAShc+fOuH79epleA9yB/eDBA3GuuHvofh24DS5cuLBM7gLuBu7492PHjuH58+cyq52J05lAR4jRW1nyA/QO3PH+jIwMNGrUCEOGDCnRVQkQ6Aqnp6fjwIED3uotU+1//fqFnj174saNG+5BmDZtGkaPHm2qK+wv9LjN//79G5MnT7ZTYTcTGKHRG+RCEqhCXuLChQuoUaOGdYh2IIwZM0YWDyOjQaPB5nb/8uVLzJkzpyQIJERycnKwcuVKo+0yXB99h927d6N+/fqi2zoTuBaQE2jdurXhRhmt8Pjx4xJxkgawgkBOMCkpSd6ViiAEYOrUqTh16tT/IPCHR48eYf78+RUBAxkjCZhly5ahefPm/16H2bNnY9iwYfCWFC1PCG7dulV2CIbdAgLpcG6PFUkePnyINWvWYM+ePVDy8vJU8nT8hZFCfpJbMo3hrhQTE2OketHVr18/iZCVjIwMlcSDpySlXsvpvvJd5EVf/tWrV6aBsGjRIokllLS0NHkdBg4cqHc8Ht3PkHbu3LngO8msE7cps2bCqlWrEBUVBSUlJUU1Mla4desWGjduLLlGUuVmgsBYok6dOlASEhJUy1bh0aP1opHZINA1oI+kxMTEqCQdtBCSXozXaVOzQSBrdufOHSjR0dHqzZs3fT0+Tf2ZDQLp+aysLChTpkxRuUiZIWaD8OHDB8mlKFFRUapZjpLZINBHOXHiBJTY2FiVVBqrRIwWs0G4cuUKCgoKoCQnJ6tmscpmg8ANgbkJJTU1VR0xYgS6du1qyETIzs4G30UKkyJcmGbNmmXlMei8GFGnRP3btm2TYg8lPT1djYiIwNChQw0BITo6Grdv3y5VF5nuBQsWGGIL/SM+fCUzM1OtVq2aYbGDIaPTqGT58uUSLij5+fmquzSVxj7L3W2WNKPwCX369JGqs1q1apW7gXhqMJMwLOhguYGAsHjxYrRv314yuBVFyKq3aNFCygEFBK7S58+fB0PLiiIDBgzA3r17ERIS8g8EVnZ069YNZsUQRgPPEuMVK1Zg3759otqad1iyZAlYLUqCJdCFvsnfv3/B8gM7EEi5r169WnKRgSwsPGXdJUNoi9jlIpmHjI2NRa9evQIWh40bNwqbRDbNKQgkPWfOnAmmqQJRvnz5IrsBi9FspUSRxtKlS2GkG20k2HSTWR3PRJNLEIhWXFycMMCBJK9fv0ZqaqrwB47itGbp8OHD4DmDSZMmBQwOjFSZ7OFpGk0g8KZA8iJtvUNnT9VlHSNXUGaq/XmIw99TjcQJjxAx4VOauC3rLc8FnVoKOe2cpdJQevHihRQ0nDt3zt8Pzaf9v3//HgkJCSCP6E7czgR2wB0jOTlZQs+goCB3fZr+d86AGTNmaAJA00ywjOjdu3dS0rNu3TrDOEBP0OQawLIjV7XMmneH0gyYOHGi5PXpS5Q14S5QqVIll4ug7t2htEGSd2DukoevqlatajoWdIR4HqNLly7iFusVTWuCs05JnRN5AsHLDOFaxdzFvXv35ACYM0dIi10eg2DpnNz9wYMHwTrI+Ph4LTq9vofhMM9j8kFQr2MsoFeB1yBQIc8184nk5eVJNRh9C5bi+FrICOXn58vUZ3GHbTjsjS6fgGAxgJklxh2XLl1C9erVreelw8PDPbaRrDAPnfPiIfO+fftaGSGPO3Vo6FMQbPvmSROL8awg5exg3aDjvwioW7eupOVs/6UAvyuKgjNnzqBjx45WMEmK+kP8BoKtsd++fZPjN1zIGJ3y03JVqVJFzlpzt+HF3IflO6vtjTiD+R+5YPhJwtU49gAAAABJRU5ErkJggg==",r="/assets/8.z_8lp8Bc.image",E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/courses/前端算法与数据结构面试：底层逻辑解读与大厂真题训练/11-姿势特别的链表——环形链表专题.md","filePath":"knowledge/courses/前端算法与数据结构面试：底层逻辑解读与大厂真题训练/11-姿势特别的链表——环形链表专题.md","lastUpdated":1706749039000}'),d={name:"knowledge/courses/前端算法与数据结构面试：底层逻辑解读与大厂真题训练/11-姿势特别的链表——环形链表专题.md"},o=l('<p>环形链表是链表中的一类特殊问题，它和链表反转一样，有着相对恒定的解题思路和适当的变体。如果你对它的特性和解法没有预先的了解和把握，那么前期的推导可能会花去你大量的时间。反过来看，只要我们能够掌握其核心思路，那么不管它怎么变化，大家都能在瞬间找到解题的“抓手”、进而给出正确的解答。</p><h2 id="环形链表基本问题——如何判断链表是否成环" tabindex="-1">环形链表基本问题——如何判断链表是否成环？ <a class="header-anchor" href="#环形链表基本问题——如何判断链表是否成环" aria-label="Permalink to &quot;环形链表基本问题——如何判断链表是否成环？&quot;">​</a></h2><blockquote><p>真题描述：给定一个链表，判断链表中是否有环。</p></blockquote><blockquote><p>示例 1：<br> 输入：[3,2,0,4]（链表结构如下图） 输出：true<br> 解释：链表中存在一个环 <img src="'+i+'" alt="链表图片" loading="lazy"></p></blockquote><h3 id="思路解读" tabindex="-1">思路解读 <a class="header-anchor" href="#思路解读" aria-label="Permalink to &quot;思路解读&quot;">​</a></h3><p>其实链表成环的特征非常明显，大家可以结合一个现实中的例子来理解：<br> 假如现实中有一个长跑爱好者李雷，这货很狂，他立了一个 flag，说要徒步环游世界：</p><p><img src="'+n+'" alt="" loading="lazy"> 地球的周长围出来的这个圆，它就是一个“环”。李雷现在就想围着这个环跑上一圈，说他狂，他也没那么狂——他觉得自己最多跑一圈，为了防止自己跑过界，他决定在出发的地方立一个 flag：</p><p><img src="'+h+'" alt="" loading="lazy"><br> 这样，不管李雷走完这个环用了多少年，世事如何变迁，只要他的 flag 还没有倒，那么李雷就一定能回到自己梦开始的地方：）。<br> 换个角度看：只要李雷在闷头前进的过程中，发现了 flag 的存在，那么就意味着，李雷确实走了一个环。毕竟若这是一条线，他将永远无法回到起点。</p><p>回到链表的世界里，也是一个道理。一个环形链表的基本修养，是能够让遍历它的游标回到原点：</p><p><img src="'+k+`" alt="" loading="lazy"><br> 从 flag 出发，只要我能够再回到 flag 处，那么就意味着，我正在遍历一个环形链表。</p><p>我们按照这个思路来做题：</p><h3 id="编码实现" tabindex="-1">编码实现 <a class="header-anchor" href="#编码实现" aria-label="Permalink to &quot;编码实现&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">param</span><span style="--shiki-light:#E5C07B;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">ListNode</span><span style="--shiki-light:#E5C07B;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">}</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> head</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">return</span><span style="--shiki-light:#E5C07B;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">boolean</span><span style="--shiki-light:#E5C07B;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">}</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 入参是头结点 </span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#61AFEF;--shiki-dark:#BABED8;"> hasCycle</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> function</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 只要结点存在，那么就继续遍历</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    while</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 如果 flag 已经立过了，那么说明环存在</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">flag</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            return</span><span style="--shiki-light:#D19A66;--shiki-dark:#FF9CAC;"> true</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">        }</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">else</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 如果 flag 没立过，就立一个 flag 再往</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">            下走</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">            head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">flag</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#FF9CAC;"> true</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">            head</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#D19A66;--shiki-dark:#FF9CAC;"> false</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">};</span></span></code></pre></div><h2 id="环形链表衍生问题——定位环的起点" tabindex="-1">环形链表衍生问题——定位环的起点 <a class="header-anchor" href="#环形链表衍生问题——定位环的起点" aria-label="Permalink to &quot;环形链表衍生问题——定位环的起点&quot;">​</a></h2><blockquote><p>真题描述：给定一个链表，返回链表开始入环的第一个结点。 如果链表无环，则返回 null。</p></blockquote><blockquote><p>示例 1：<br> 输入：head = [3,2,0,-4]（如下图） 输出：tail connects to node index 1 解释：链表中有一个环，其尾部连接到第二个结点。 <img src="`+i+'" alt="链表成环1" loading="lazy"></p></blockquote><blockquote><p>示例 2：<br> 输入：head = [1,2]（如下图）<br> 输出：tail connects to node index 0<br> 解释：链表中有一个环，其尾部连接到第一个结点。 <img src="'+e+'" alt="链表成环2" loading="lazy"></p></blockquote><blockquote><p>示例 3：<br> 输入：head = [1]（如下图）<br> 输出：no cycle<br> 解释：链表中没有环。<br><img src="'+p+'" alt="链表成环3" loading="lazy"></p></blockquote><h3 id="思路解读-1" tabindex="-1">思路解读 <a class="header-anchor" href="#思路解读-1" aria-label="Permalink to &quot;思路解读&quot;">​</a></h3><p>这道题在上道题的基础上，仅仅增加了一个“返回链表的成环起点”，其难度定义就从 easy 上升到了 medium。不过对于掌握了关键解题思路的各位来说，这道题仍然是 easy——因为如果一个结点是环形链表成环的起点，那么它一定是第一个被发现 flag 标志已存在的结点：</p><p><img src="'+r+`" alt="" loading="lazy"> 这一点不难理解，我们试想如果从头开始遍历一个链表，假如途中进入了一个环，那么首先被打上 flag 标签的其实就是环的起点。待我们遍历完这个环时，即便环上所有的结点都已经被立了 flag，但起点处的 flag 一定最先被我们定位到。因此，我们只需要在第一次发现 flag 已存在时，将对应的结点返回即可：</p><h3 id="编码实现-1" tabindex="-1">编码实现 <a class="header-anchor" href="#编码实现-1" aria-label="Permalink to &quot;编码实现&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">param</span><span style="--shiki-light:#E5C07B;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">ListNode</span><span style="--shiki-light:#E5C07B;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">}</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> head</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">return</span><span style="--shiki-light:#E5C07B;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {</span><span style="--shiki-light:#E5C07B;--shiki-dark:#FFCB6B;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">ListNode</span><span style="--shiki-light:#E5C07B;--shiki-dark:#89DDFF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">}</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#61AFEF;--shiki-dark:#BABED8;"> detectCycle</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C792EA;"> function</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    while</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">flag</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            return</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">        }</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">else</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">            head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">flag</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#FF9CAC;"> true</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">            head</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;"> head</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">};</span></span></code></pre></div><h2 id="快慢指针的思路" tabindex="-1">快慢指针的思路 <a class="header-anchor" href="#快慢指针的思路" aria-label="Permalink to &quot;快慢指针的思路&quot;">​</a></h2><p>这道题还有一个公认的比较经典的思路，就是用快慢指针来做：<br> 定义慢指针 slow，快指针 fast。两者齐头并进， slow 一次走一步、fast 一次 走两步。这样如果它们是在一个有环的链表里移动，一定有相遇的时刻。这个原理证明起来也比较简单：我们假设移动的次数为 t，slow 移动的路程就是<code>t</code>，fast 移动的路程为<code>2t</code>，假如环的长度为 <code>s</code>，那么当下面这个条件：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">2</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">t</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> -</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> t</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> s</span></span></code></pre></div><p>也就是：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">t</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> s</span></span></code></pre></div><p>满足时，slow 和 fast 就一定会相遇。反之，如果两者没有相遇，同时 fast 遍历到了链表的末尾，发现 next 指针指向 null，则链表中不存在环。</p><p>有兴趣的同学，可以尝试用双指针法实现一遍上面的判定。不过我更加推荐的仍然是“立flag”法，理解难度和编码难度上来说都更加友好，有利于大家实现题目的“秒杀”。</p><h2 id="弦外之音" tabindex="-1">弦外之音 <a class="header-anchor" href="#弦外之音" aria-label="Permalink to &quot;弦外之音&quot;">​</a></h2><p>在这一节，大家会发现一个非常有趣的现象——做环形链表的系列题目，难点其实在于你怎么去想明白这个成环的过程、怎么把握成环后的特性。真正编码实现的时候，寥寥数行就可以搞定。这其实也是我想要向大家传达的一个重要的解题习惯——做算法题时，不要急于下手写代码，而应该先静下心来，稳住神、一步一步捋清楚你自己的思路。</p><p>之所以要把这点单独拎出来讲，是因为我知道很多同学平时写业务代码比较多。前端业务代码是什么特征？干就完了，对吧？反正就算代码有问题，也可以通过直观的视觉反馈及时发现、及时修复。在肉眼可见的反馈的指导下，你基本不会出什么方向性的问题。</p><p>做算法题就大不一样了，真正提交给 OJ 运行之前，除了你自己的逻辑判断之外、没有任何直观的线索能够帮你明确问题的所在。也就是说，如果你一开始压根没想清楚、脑子里本来就是一团乱麻，那么直接开干后往往是越写越乱、最后代码的修复成本也会变得非常高。</p><p>盲写代码、乱写代码，不仅容易扰乱自己的思路，也会给面试官留下“这个人怎么这么冒失”一类的负面印象。所以大家一定要尽量规避这种行为，如果实在对自己的思路感到不确定、不自信，这时候可以问对方要张纸、先线下梳理一下。真正面试的时候，我们对于自己敲在屏幕上的每一行代码，都应该抱有敬畏之心。</p><p>（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）</p>`,36),g=[o];function y(B,c,F,D,f,C){return t(),a("div",null,g)}const u=s(d,[["render",y]]);export{E as __pageData,u as default};
