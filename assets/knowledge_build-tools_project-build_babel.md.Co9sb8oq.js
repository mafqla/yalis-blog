import{_ as k}from"./chunks/ArticleMetadata.Cb6xkSSC.js";import{_ as r,c as d,I as o,w as F,j as i,t as n,a as B,a5 as t,D as b,o as e,b as c,e as g}from"./chunks/framework.DFZFlKnm.js";import"./chunks/theme.pgdQuHeQ.js";import"./chunks/index.YN-kDkKe.js";const w=JSON.parse('{"title":"Babel","description":"","frontmatter":{"title":"Babel","date":"2022-8-21 18:51"},"headers":[],"relativePath":"knowledge/build-tools/project-build/babel.md","filePath":"knowledge/build-tools/project-build/babel.md","lastUpdated":1723618142000}'),D={name:"knowledge/build-tools/project-build/babel.md"},y=i("h1",{id:"babel-js配置",tabindex:"-1"},[B("Babel.js配置 "),i("a",{class:"header-anchor",href:"#babel-js配置","aria-label":'Permalink to "Babel.js配置"'},"​")],-1),C=t(`<h2 id="_1-什么是babel" tabindex="-1">1.什么是Babel <a class="header-anchor" href="#_1-什么是babel" aria-label="Permalink to &quot;1.什么是Babel&quot;">​</a></h2><ul><li>Babel是一个工具链，主要用于旧浏览器或者环境中将ECMAScript 2015+代码转换为向后兼容版本的 JavaScript；</li><li>包括：语法转换、源代码转换等；</li></ul><h2 id="_2-babel命令行使用" tabindex="-1">2.Babel命令行使用 <a class="header-anchor" href="#_2-babel命令行使用" aria-label="Permalink to &quot;2.Babel命令行使用&quot;">​</a></h2><ul><li><p>babel本身可以作为一个独立的工具（和postcss一样），不和webpack等构建工具配置来单独使用。</p></li><li><p>如果我们希望在命令行尝试使用babel，需要安装如下库：</p><ul><li><p>@babel/core：babel的核心代码，必须安装；</p></li><li><p>@babel/cli：可以让我们在命令行使用babel；</p></li><li><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#FFCB6B;">npm</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> install</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> @babel/cli</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> @babel/core</span><span style="--shiki-light:#D19A66;--shiki-dark:#C3E88D;"> -D</span></span></code></pre></div></li></ul></li><li><p>使用babel来处理我们的源代码：</p></li><li><p>src：是源文件的目录；</p></li><li><p>--out-dir：指定要输出的文件夹dist；</p><ul><li><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#FFCB6B;">npm</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> install</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> @babel/cli</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> @babel/core</span><span style="--shiki-light:#D19A66;--shiki-dark:#C3E88D;"> -D</span></span></code></pre></div></li></ul></li></ul><h2 id="_3-插件的使用" tabindex="-1">3.插件的使用 <a class="header-anchor" href="#_3-插件的使用" aria-label="Permalink to &quot;3.插件的使用&quot;">​</a></h2><ul><li><p>比如我们需要转换箭头函数，那么我们就可以使用箭头函数转换相关的插件：</p><ul><li><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#FFCB6B;">npm</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> install</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> @babel/plugin-transform-arrow-functions</span><span style="--shiki-light:#D19A66;--shiki-dark:#C3E88D;"> -D</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#FFCB6B;">npx</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> babel</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> src</span><span style="--shiki-light:#D19A66;--shiki-dark:#C3E88D;"> --out-dir</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> dist</span><span style="--shiki-light:#D19A66;--shiki-dark:#C3E88D;"> --plugins=@babel/plugin-transform-arrow-functions</span></span></code></pre></div></li></ul></li><li><p>查看转换后的结果：我们会发现 const 并没有转成 var</p><ul><li><p>这是因为 plugin-transform-arrow-functions，并没有提供这样的功能；</p></li><li><p>我们需要使用 plugin-transform-block-scoping 来完成这样的功能； 插件的使用</p></li><li><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#FFCB6B;">npm</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> install</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> @babel/plugin-transform-block-scoping</span><span style="--shiki-light:#D19A66;--shiki-dark:#C3E88D;"> -D</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#FFCB6B;">npx</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> babel</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> src</span><span style="--shiki-light:#D19A66;--shiki-dark:#C3E88D;"> --out-dir</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> dist</span><span style="--shiki-light:#D19A66;--shiki-dark:#C3E88D;"> --plugins=@babel/plugin-transform-block-scoping</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#FFCB6B;">,@babel/plugin-transform-arrow-functions</span></span></code></pre></div></li></ul></li></ul><h2 id="_4-babel的原理" tabindex="-1">4.Babel的原理 <a class="header-anchor" href="#_4-babel的原理" aria-label="Permalink to &quot;4.Babel的原理&quot;">​</a></h2><ul><li>从一种源代码（原生语言）转换成另一种源代码（目标语言），这是什么的工作呢？</li><li>就是编译器，事实上我们可以将babel看成就是一个编译器。</li><li>Babel编译器的作用就是将我们的源代码，转换成浏览器可以直接识别的另外一段源代码；</li><li>Babel也拥有编译器的工作流程： <ul><li>解析阶段（Parsing）</li><li>转换阶段（Transformation）</li><li>生成阶段（Code Generation）</li></ul></li></ul><blockquote><p>执行原理</p></blockquote>`,9),u=t(`<h2 id="_5-babel-loader" tabindex="-1">5.babel-loader <a class="header-anchor" href="#_5-babel-loader" aria-label="Permalink to &quot;5.babel-loader&quot;">​</a></h2><p>在实际开发中，我们通常会在构建工具中通过配置babel来对其进行使用的，比如在webpack中。</p><ul><li><p>那么我们就需要去安装相关的依赖：</p><ul><li><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#FFCB6B;">npm</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> install</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> babel-loader</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> @babel/core</span></span></code></pre></div></li></ul></li><li><p>果之前已经安装了@babel/core，那么这里不需要再次安装；</p></li><li><p>我们可以设置一个规则，在加载js文件时，使用我们的babel：</p><ul><li><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">module</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:{</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    rules</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">[</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">        {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">            test</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">/</span><span style="--shiki-light:#56B6C2;--shiki-dark:#BABED8;">\\.</span><span style="--shiki-light:#E06C75;--shiki-dark:#C3E88D;">m</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">?</span><span style="--shiki-light:#E06C75;--shiki-dark:#C3E88D;">js</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">$</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">/</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">            use</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:{</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">                loader</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">babel-loader</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">            }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">    ]</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></li><li><p>指定使用的插件才会生效</p></li><li><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">module</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:{</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    rules</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">[</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">        {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">            test</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">/</span><span style="--shiki-light:#56B6C2;--shiki-dark:#BABED8;">\\.</span><span style="--shiki-light:#E06C75;--shiki-dark:#C3E88D;">m</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">?</span><span style="--shiki-light:#E06C75;--shiki-dark:#C3E88D;">js</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">$</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">/</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">            use</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:{</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">                loader</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">babel-loader</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">                options</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">                plugins</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">[</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">                	&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">@babel/plugin-transform-block-scoping</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">                	&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">@babel/plugin-transform-arrow-functions</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">                ]</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">            }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">            }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">    ]</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></li></ul></li></ul><h2 id="_6-babel-preset" tabindex="-1">6.babel-preset <a class="header-anchor" href="#_6-babel-preset" aria-label="Permalink to &quot;6.babel-preset&quot;">​</a></h2><ul><li><p>如果我们一个个去安装使用插件，那么需要手动来管理大量的babel插件，我们可以直接给webpack提供一个 preset，webpack会根据我们的预设来加载对应的插件列表，并且将其传递给babel。</p></li><li><p>比如常见的预设有三个：</p><ul><li><p>env</p></li><li><p>react</p></li><li><p>TypeScript</p></li></ul></li><li><p>安装preset-env：</p><ul><li><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#FFCB6B;">npm</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> install</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> @babel/preset-env</span></span></code></pre></div></li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    test</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">/</span><span style="--shiki-light:#56B6C2;--shiki-dark:#BABED8;">\\.</span><span style="--shiki-light:#E06C75;--shiki-dark:#C3E88D;">m</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">?</span><span style="--shiki-light:#E06C75;--shiki-dark:#C3E88D;">js</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">$</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">/</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    use</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:{</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">        loader</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">babel-loader</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">        options</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:{</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">            presets</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">[</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">                [</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">@babel/preset-env</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">]</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">            ]</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><h2 id="_7-babel的配置文件" tabindex="-1">7.Babel的配置文件 <a class="header-anchor" href="#_7-babel的配置文件" aria-label="Permalink to &quot;7.Babel的配置文件&quot;">​</a></h2><ul><li>像之前一样，我们可以将babel的配置信息放到一个独立的文件中，babel给我们提供了两种配置文件的编写 <ul><li>babel.config.json（或者.js，.cjs，.mjs）文件；</li><li>babelrc.json（或者.babelrc，.js，.cjs，.mjs）文件；</li></ul></li><li>它们两个有什么区别呢？目前很多的项目都采用了多包管理的方式（babel本身、element-plus、umi等）；</li><li>.babelrc.json：早期使用较多的配置方式，但是对于配置Monorepos项目是比较麻烦的；</li><li>babel.config.json（babel7）：可以直接作用于Monorepos项目的子包，更加推荐</li></ul>`,8);function m(s,E,A,_,v,f){const p=k,h=b("ClientOnly");return e(),d("div",null,[y,o(h,null,{default:F(()=>{var a,l;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((l=s.$frontmatter)==null?void 0:l.showArticleMetadata)??!0)?(e(),c(p,{key:0,article:s.$frontmatter,readTime:1,words:256},null,8,["article"])):g("",!0)]}),_:1}),C,i("p",null,"::: mermaid flowchart LR; id1"+n(s.原生源代码)+"-->id2(词法分析); id2-->id3(token数组); id3-->id4(语法分析); id4-->id5(AST抽象语法树); id5-->id6(遍历); id6-->id7(访问); id7-->id8(应用插件); id8-->id9(新的AST); id9-->id10"+n(s.目标代码)+" :::",1),u])}const P=r(D,[["render",m]]);export{w as __pageData,P as default};
