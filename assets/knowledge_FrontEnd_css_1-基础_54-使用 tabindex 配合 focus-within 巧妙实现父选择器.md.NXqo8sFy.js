import{_ as a,c as t,o as e,V as s,m as i}from"./chunks/framework.bW6FiXxS.js";const n="/assets/97591748-e2c63d00-1a3a-11eb-90f2-bd2609a57b8b.AIaZaqip.gif",h="/assets/97591792-efe32c00-1a3a-11eb-86fa-295ac87483cb.CkOGvsgt.gif",l="/assets/97651574-69a90300-1a97-11eb-84f9-92c7bb00439f.-5G33aAh.gif",_=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/FrontEnd/css/1-基础/54-使用 tabindex 配合 focus-within 巧妙实现父选择器.md","filePath":"knowledge/FrontEnd/css/1-基础/54-使用 tabindex 配合 focus-within 巧妙实现父选择器.md","lastUpdated":1710204572000}'),p={name:"knowledge/FrontEnd/css/1-基础/54-使用 tabindex 配合 focus-within 巧妙实现父选择器.md"},k=s('<h2 id="css-中是否存在父选择器" tabindex="-1">CSS 中是否存在父选择器？ <a class="header-anchor" href="#css-中是否存在父选择器" aria-label="Permalink to &quot;CSS 中是否存在父选择器？&quot;">​</a></h2><p>这是一个非常经典的问题，到目前为止，CSS 没有真正意义上被广泛实现的父选择器，这和浏览器的渲染机制有关。</p><p>如果你对 CSS 中是否存在父选择器有疑惑，可以去看看 <a href="https://www.zhihu.com/question/20443379" target="_blank" rel="noreferrer">知乎 -- CSS 中能否选取父元素？</a></p><p>当然，这不代表 CSS 完全无法通过子元素去控制父元素，通过 <code>:focus-within</code> 伪类可以近似的达到类似的目的。</p><h2 id="focus-within-伪类" tabindex="-1"><code>:focus-within</code> 伪类 <a class="header-anchor" href="#focus-within-伪类" aria-label="Permalink to &quot;`:focus-within` 伪类&quot;">​</a></h2><p>首先需要复习一下 <code>:focus-within</code>，它是一个伪类。</p><p>它表示一个元素获得焦点，或，该元素的后代元素获得焦点。<strong>划重点，它或它的后代获得焦点</strong>。</p><p>关于 <code>:focus-within</code>，不算太了解的可以先看看这篇文章：<a href="https://github.com/chokcoco/iCSS/issues/36" target="_blank" rel="noreferrer">《神奇的选择器 :focus-within》</a></p><p>利用它，我们可以实现类似这样的功能，通过元素的子元素的获焦（focus 事件），触发该伪元素，从而实现一个狭义的父选择器，类似这样：</p>',9),o=i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"CSS focus-within INPUT",src:"https://codepen.io/mafqla/embed/bGZRWqX?default-tab=html%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/mafqla/pen/bGZRWqX">
  CSS focus-within INPUT</a> by mafqla (<a href="https://codepen.io/mafqla">@mafqla</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),d=s(`<h2 id="focus-within-伪类实现父选择的缺陷" tabindex="-1"><code>:focus-within</code> 伪类实现父选择的缺陷 <a class="header-anchor" href="#focus-within-伪类实现父选择的缺陷" aria-label="Permalink to &quot;\`:focus-within\` 伪类实现父选择的缺陷&quot;">​</a></h2><p>借助 <code>:focus-within</code> 实现父类选择器最大的问题是，元素必须要有 <code>focus</code> 事件，才能触发它或者它的父元素的 <code>:focus-within</code>。</p><p>所以，这就导致了在之前我认为 <code>:focus-within</code> 只能配合 <code>&lt;button&gt;</code>、<code>&lt;input &gt;</code> 元素一起使用。</p><blockquote><p>诸如 <code>&lt;button&gt;</code>，<code>&lt;input&gt;</code>，<code>&lt;select&gt;</code>，<code>&lt;a&gt;</code> 这类可交互元素，默认是存在 focus 事件的，而类似 <code>&lt;div&gt;</code>，<code>&lt;span&gt;</code> 和 <code>&lt;table&gt;</code> 这类非交互元素，默认是不能被聚焦的。</p></blockquote><p>也是因为这个原因，大大限制了它的使用场景。基于此，我们引入本文的另外一个主角 -- <code>tabindex</code>。</p><h2 id="使用-tabindex-使元素获得-focus-事件" tabindex="-1">使用 <code>tabindex</code> 使元素获得 <code>focus</code> 事件 <a class="header-anchor" href="#使用-tabindex-使元素获得-focus-事件" aria-label="Permalink to &quot;使用 \`tabindex\` 使元素获得 \`focus\` 事件&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex" target="_blank" rel="noreferrer">tabindex</a>: HTML 标签的属性，指示其元素是否可以聚焦，以及它是否/在何处参与顺序键盘导航（通常使用 Tab 键，因此得名）。</p><p>也就是说，一个单纯的 div 标签，他是没有 focus 事件的，然而，我们给它加上一个 tabindex 属性，这个时候他就会获得类似 <code>input</code> 框一样的表现，拥有了 <code>focus</code> 事件，再配合 <code>:focus-within</code>，能够使用的场景就大大提升了。</p><p>看看伪代码：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">g-father</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  &lt;!-- 没有 focus 事件的 .g-children 元素 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">g-children</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">Click</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">g-father</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  &lt;!-- 拥有 focus 事件的 .g-children 元素 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">g-children</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> tabindex</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">-1</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">Click</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><blockquote><p>这里为什么是 <code>tabindex=&quot;-1&quot;</code> 呢，tabindex 负值表示元素是可聚焦的，但是不能通过键盘导航来访问到该元素。因为我们只需要让元素能够获得 focus 事件，而不需要他真的能够被键盘导航来访问。</p></blockquote><p>这样，配合 <code>:focus-within</code>，就能做到当点击子元素的时候，去改变父元素的样式了。</p><p>并且，我们可以在任意元素上搭配 <code>tabindex</code>，脱离了 <code>&lt;input&gt;, &lt;a&gt;, &lt;button&gt;</code> 等元素才有 focus 事件的束缚。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">g-father</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">focus-within</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> #</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">fc0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div>`,15),r=i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"tabindex 配合 focus-within 实现div的父选择器",src:"https://codepen.io/mafqla/embed/ZEPyKKp?default-tab=html%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/mafqla/pen/ZEPyKKp">
  tabindex 配合 focus-within 实现div的父选择器</a> by mafqla (<a href="https://codepen.io/mafqla">@mafqla</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),c=s(`<h2 id="一个小细节-button-的-focus-事件在-safari-和-firefox-的上冒泡问题" tabindex="-1">一个小细节，button 的 focus 事件在 Safari 和 firefox 的上冒泡问题 <a class="header-anchor" href="#一个小细节-button-的-focus-事件在-safari-和-firefox-的上冒泡问题" aria-label="Permalink to &quot;一个小细节，button 的 focus 事件在 Safari 和 firefox 的上冒泡问题&quot;">​</a></h2><p>由于 input 元素（或者任意元素 +<code>tabindex</code>） 配合 <code>:focus-within</code> 的方案依赖 focus 事件的冒泡。</p><p>而对于 <code>&lt;button&gt;</code> 元素，稍微有点特殊，存在这样两个问题，即：</p><ol><li>在 MacOS 的 Safari 和 Firefox 中， **点击 <code>&lt;button&gt;</code> 元素，不会触发 <code>&lt;button&gt;</code> 的 focus 事件，也没有 focus 事件冒泡。</li><li>在 Windows 的 Safari 和 Firefox 中， <strong>点击 <code>&lt;button&gt;</code> 元素，会触发 <code>&lt;button&gt;</code> 的 focus 事件，但在被目标元素捕捉到之后，不会继续向上冒泡</strong>。</li></ol><p>什么意思呢？我们来验证一下，使用类似这样的结构：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">g-father</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">input</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> type</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">button</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">Button</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">input</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">focus</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> #</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">00bcd4</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">body</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">focus-within</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> blue</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">g-father</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">focus-within</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> red</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>看看，在 Chrome 下的表现： <img src="`+n+'" alt="tabindex2" loading="lazy"></p><p>在 Windows 的 Safari，Firefox 下的表现：</p><p><img src="'+h+'" alt="tabindex3" loading="lazy"></p><p>在 MacOS 的 Safari，Firefox 下的表现： <img src="'+l+'" alt="macbuttonfocus" loading="lazy"></p><p>在 Chrome 上的表现是正常，而在 Windows 的 Safari、Firefox 上，会触发 button 的 focus 事件，但不会触发父元素的 <code>:focus-within</code> 事件，也就是上面说的，focus 事件，在被目标元素捕捉到之后，不会继续向上冒泡。而在 Mac 上，则连 focus 都不会触发。</p><p>这一点，在使用的时候务必需要留意。</p>',13),F=i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"button 的 focus 事件冒泡性验证（Chorme / Safari / Firefox）",src:"https://codepen.io/mafqla/embed/XWGgRRM?default-tab=html%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/mafqla/pen/XWGgRRM">
  button 的 focus 事件冒泡性验证（Chorme / Safari / Firefox）</a> by mafqla (<a href="https://codepen.io/mafqla">@mafqla</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),g=[k,o,d,r,c,F];function B(D,u,f,y,C,b){return e(),t("div",null,g)}const m=a(p,[["render",B]]);export{_ as __pageData,m as default};
