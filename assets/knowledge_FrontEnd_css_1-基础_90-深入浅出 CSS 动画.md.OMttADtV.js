import{_ as a,c as n,o as t,V as s,m as i}from"./chunks/framework.bW6FiXxS.js";const h="/assets/137946058-cd27fdc0-45a6-4710-a5bd-f81a9ee77bd4.TuRz29SP.gif",q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/FrontEnd/css/1-基础/90-深入浅出 CSS 动画.md","filePath":"knowledge/FrontEnd/css/1-基础/90-深入浅出 CSS 动画.md","lastUpdated":1710810633000}'),l={name:"knowledge/FrontEnd/css/1-基础/90-深入浅出 CSS 动画.md"},e=s(`<h2 id="css-动画介绍及语法" tabindex="-1">CSS 动画介绍及语法 <a class="header-anchor" href="#css-动画介绍及语法" aria-label="Permalink to &quot;CSS 动画介绍及语法&quot;">​</a></h2><p>首先，我们来简单介绍一下 CSS 动画。</p><p>最新版本的 CSS 动画由规范 -- <a href="https://www.w3.org/TR/2018/WD-css-animations-1-20181011/" target="_blank" rel="noreferrer">CSS Animations Level 1</a> 定义。</p><p>CSS 动画用于实现元素从一个 CSS 样式配置转换到另一个 CSS 样式配置。</p><p>动画包括两个部分: 描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。</p><p>简单来说，看下面的例子：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> change </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> change</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  0%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    color</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> #</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">f00</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    color</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> #</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">000</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><ol><li><code>animation: move 1s</code> 部分就是动画的第一部分，用于描述动画的各个规则;</li><li><code>@keyframes move {}</code> 部分就是动画的第二部分，用于指定动画开始、结束以及中间点样式的关键帧;</li></ol><p>一个 CSS 动画一定要由上述两部分组成。</p><h3 id="css-动画的语法" tabindex="-1">CSS 动画的语法 <a class="header-anchor" href="#css-动画的语法" aria-label="Permalink to &quot;CSS 动画的语法&quot;">​</a></h3><p>接下来，我们简单看看 CSS 动画的语法。</p><p>创建动画序列，需要使用 animation 属性或其子属性，该属性允许配置动画时间、时长以及其他动画细节，但该属性不能配置动画的实际表现，动画的实际表现是由 <a href="https://github.com/Keyframes" target="_blank" rel="noreferrer">@Keyframes</a> 规则实现。</p><p>animation 的子属性有：</p><ul><li>animation-name：指定由 <a href="https://github.com/Keyframes" target="_blank" rel="noreferrer">@Keyframes</a> 描述的关键帧名称。</li><li>animation-duration：设置动画一个周期的时长。</li><li>animation-delay：设置延时，即从元素加载完成之后到动画序列开始执行的这段时间。</li><li>animation-direction：设置动画在每次运行完后是反向运行还是重新回到开始位置重复运行。</li><li>animation-iteration-count：设置动画重复次数， 可以指定 infinite 无限次重复动画</li><li>animation-play-state：允许暂停和恢复动画。</li><li>animation-timing-function：设置动画速度， 即通过建立加速度曲线，设置动画在关键帧之间是如何变化。</li><li>animation-fill-mode：指定动画执行前后如何为目标元素应用样式</li><li><a href="https://github.com/Keyframes" target="_blank" rel="noreferrer">@Keyframes</a> 规则，当然，一个动画想要运行，还应该包括 <a href="https://github.com/Keyframes" target="_blank" rel="noreferrer">@Keyframes</a> 规则，在内部设定动画关键帧</li></ul><p>其中，对于一个动画：</p><ul><li><strong>必须项</strong>：<code>animation-name</code>、<code>animation-duration</code> 和 <code>@keyframes</code>规则</li><li><strong>非必须项</strong>：<code>animation-delay</code>、<code>animation-direction</code>、<code>animation-iteration-count</code>、<code>animation-play-state</code>、<code>animation-timing-function</code>、<code>animation-fill-mode</code>，当然不是说它们不重要，只是不设置时，它们都有默认值</li></ul><p>上面已经给了一个简单的 DEMO， 就用上述的 DEMO，看看结果：</p><p><a href="https://user-images.githubusercontent.com/8554143/136658478-50a54cc5-c2fd-4692-ae51-22bcc54a76c7.gif" target="_blank" rel="noreferrer">![img]./img/136658478-50a54cc5-c2fd-4692-ae51-22bcc54a76c7.gif)</a></p><p>这就是一个最基本的 CSS 动画，本文将从 animation 的各个子属性入手，探究 CSS 动画的方方面面。</p><h2 id="animation-name-animation-duration-详解" tabindex="-1">animation-name / animation-duration 详解 <a class="header-anchor" href="#animation-name-animation-duration-详解" aria-label="Permalink to &quot;animation-name / animation-duration 详解&quot;">​</a></h2><p>整体而言，单个的 <code>animation-name</code> 和 <code>animation-duration</code> 没有太多的技巧，非常好理解，放在一起。</p><p>首先介绍一下 <code>animation-name</code>，通过 <code>animation-name</code>，CSS 引擎将会找到对应的 <a href="https://github.com/Keyframes" target="_blank" rel="noreferrer">@Keyframes</a> 规则。</p><p><a href="https://user-images.githubusercontent.com/8554143/137327184-5ecde678-1b4d-41a0-b10e-3daaa7f3d1bd.png" target="_blank" rel="noreferrer">![img]./img/137327184-5ecde678-1b4d-41a0-b10e-3daaa7f3d1bd.png)</a></p><p>当然，它和 CSS 规则命名一样，也存在一些骚操作。譬如，他是支持 emoji 表情的，所以代码中的 <code>animation-name</code> 命名也可以这样写：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> 😄 </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 😄</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  0%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    color</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> #</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">f00</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    color</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> #</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">000</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>而 <code>animation-duration</code> 设置动画一个周期的时长，上述 DEMO 中，就是设定动画整体持续 <code>3s</code>，这个也非常好理解。</p><h2 id="animation-delay-详解" tabindex="-1">animation-delay 详解 <a class="header-anchor" href="#animation-delay-详解" aria-label="Permalink to &quot;animation-delay 详解&quot;">​</a></h2><p><code>animation-delay</code> 就比较有意思了，它可以设置动画延时，即从元素加载完成之后到动画序列开始执行的这段时间。</p><p>简单的一个 DEMO：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  width</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  height</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> #</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">000</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation-name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> move</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation-duration</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">nth-child</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation-delay</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> move</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  0%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">200</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>比较下列两个动画，一个添加了 <code>animation-delay</code>，一个没有，非常直观：</p><p><a href="https://user-images.githubusercontent.com/8554143/137944819-5f4542f6-88a0-43c0-96d7-33191f1c6c9d.gif" target="_blank" rel="noreferrer">![img]./img/137944819-5f4542f6-88a0-43c0-96d7-33191f1c6c9d.gif)</a></p><p>上述第二个 div，关于 <code>animation</code> 属性，也可以简写为 <code>animation: move 2s 1s</code>，第一个时间值表示持续时间，第二个时间值表示延迟时间。</p><h3 id="animation-delay-可以为负值" tabindex="-1">animation-delay 可以为负值 <a class="header-anchor" href="#animation-delay-可以为负值" aria-label="Permalink to &quot;animation-delay 可以为负值&quot;">​</a></h3><p>关于 <code>animation-delay</code>，最有意思的技巧在于，它可以是负数。也就是说，虽然属性名是<strong>动画延迟时间</strong>，但是运用了负数之后，动画可以<strong>提前进行</strong>。</p><p>假设我们要实现这样一个 loading 动画效果：</p><p><a href="https://user-images.githubusercontent.com/8554143/137946058-cd27fdc0-45a6-4710-a5bd-f81a9ee77bd4.gif" target="_blank" rel="noreferrer">![img]./img/137946058-cd27fdc0-45a6-4710-a5bd-f81a9ee77bd4.gif)</a></p><p>有几种思路：</p><ol><li>初始 3 个球的位置就是间隔 120°，同时开始旋转，但是这样代码量会稍微多一点</li><li>另外一种思路，同一个动画，3 个元素的其中两个延迟整个动画的 1/3，2/3 时间出发</li></ol><p>方案 2 的核心伪代码如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">item</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">nth-child</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> rotate </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> linear</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">item</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">nth-child</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> rotate </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> linear</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">item</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">nth-child</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> rotate </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> linear</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>但是，在动画的前 2s，另外两个元素是不会动的，只有 2s 过后，整个动画才是我们想要的：</p><p><a href="https://user-images.githubusercontent.com/8554143/137946900-bd225b40-e780-4498-b272-8b4a9c39b42e.gif" target="_blank" rel="noreferrer">![img]./img/137946900-bd225b40-e780-4498-b272-8b4a9c39b42e.gif)</a></p><p>此时，我们可以让第 2、3 个元素的延迟时间，改为负值，这样可以让动画延迟进行 <code>-1s</code>、<code>-2s</code>，也就是提前进行 <code>1s</code>、<code>2s</code>：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">item</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">nth-child</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> rotate </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> linear</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">item</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">nth-child</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> rotate </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> -1</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> linear</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">item</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">nth-child</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> rotate </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> -2</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> linear</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>这样，每个元素都无需等待，直接就是运动状态中的，并且元素间隔位置是我们想要的结果：</p><p><img src="`+h+'" alt="img" loading="lazy"></p><h3 id="利用-animation-duration-和-animation-delay-构建随机效果" tabindex="-1">利用 animation-duration 和 animation-delay 构建随机效果 <a class="header-anchor" href="#利用-animation-duration-和-animation-delay-构建随机效果" aria-label="Permalink to &quot;利用 animation-duration 和 animation-delay 构建随机效果&quot;">​</a></h3><p>还有一个有意思的小技巧。</p><p>同一个动画，我们利用一定范围内随机的 <code>animation-duration</code> 和一定范围内随机的 <code>animation-delay</code>，可以有效的构建更为随机的动画效果，让动画更加的自然。</p><p>我在下述两个纯 CSS 动画中，都使用了这样的技巧：</p><ol><li><a href="https://codepen.io/Chokcoco/pen/vYExwvm" target="_blank" rel="noreferrer">纯 CSS 实现华为充电动画</a>：</li></ol><p>以<strong>纯 CSS 实现华为充电动画</strong>为例子，简单讲解一下。</p><p>仔细观察这一部分，上升的一个一个圆球，抛去这里的一些融合效果，只关注不断上升的圆球，看着像是没有什么规律可言：</p>',55),p=i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"HuaWei Battery Charging Animation",src:"https://codepen.io/mafqla/embed/mdgygRZ?default-tab=html%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/mafqla/pen/mdgygRZ">
  HuaWei Battery Charging Animation</a> by mafqla (<a href="https://codepen.io/mafqla">@mafqla</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),k=s(`<p>我们来模拟一下，如果是使用 10 个 <code>animation-duration</code> 和 <code>animation-delay</code> 都一致的圆的话，核心伪代码：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">ul</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">li</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">li</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  &lt;!--共 10 个...--&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">li</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">li</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">ul</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">ul</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  display</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> flex</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  flex-wrap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> nowrap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  gap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 5</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">li</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> #</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">000</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> move</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 3</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> linear</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> move</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  0%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> -100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>这样，小球的运动会是这样的整齐划一：</p><p><a href="https://user-images.githubusercontent.com/8554143/138097542-01c2a05d-1a21-43cb-826c-b93ac82e9f98.gif" target="_blank" rel="noreferrer">![img]./img/138097542-01c2a05d-1a21-43cb-826c-b93ac82e9f98.gif)</a></p><p>要让小球的运动显得非常的随机，只需要让 <code>animation-duration</code> 和 <code>animation-delay</code> 都在一定范围内浮动即可，改造下 CSS：</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@for</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;"> $i</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> from</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> to</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 11</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">  li</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">nth-child</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">#{</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">$i</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    animation-duration</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> #{</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;">random</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">2000</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> /</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1000</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    animation-delay</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;"> #{</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;">random</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">1000</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> /</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1000</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>我们利用 SASS 的循环和 <code>random()</code> 函数，让 <code>animation-duration</code> 在 2-4 秒范围内随机，让 <code>animation-delay</code> 在 1-2 秒范围内随机，这样，我们就可以得到非常自然且不同的上升动画效果，基本不会出现重复的画面，很好的模拟了随机效果：</p>`,8),B=i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Aniamtion Demo",src:"https://codepen.io/mafqla/embed/wvZBZJK?default-tab=html%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/mafqla/pen/wvZBZJK">
  Aniamtion Demo</a> by mafqla (<a href="https://codepen.io/mafqla">@mafqla</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),r=s(`<h2 id="animation-timing-function-缓动函数" tabindex="-1">animation-timing-function 缓动函数 <a class="header-anchor" href="#animation-timing-function-缓动函数" aria-label="Permalink to &quot;animation-timing-function 缓动函数&quot;">​</a></h2><p>缓动函数在动画中非常重要，它定义了动画在每一动画周期中执行的节奏。</p><p>缓动主要分为两类：</p><ol><li>cubic-bezier-timing-function 三次贝塞尔曲线缓动函数</li><li>step-timing-function 步骤缓动函数（这个翻译是我自己翻的，可能有点奇怪）</li></ol><h3 id="三次贝塞尔曲线缓动函数" tabindex="-1">三次贝塞尔曲线缓动函数 <a class="header-anchor" href="#三次贝塞尔曲线缓动函数" aria-label="Permalink to &quot;三次贝塞尔曲线缓动函数&quot;">​</a></h3><p>首先先看看<strong>三次贝塞尔曲线缓动函数</strong>。在 CSS 中，支持一些缓动函数关键字。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/* Keyword values */</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">animation-timing-function</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">: ease;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> // </span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">动画以低速开始，然后加快，在结束前变慢</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">animation-timing-function</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">: </span><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">ease-in</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> // </span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">动画以低速开始</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">animation-timing-function</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">: </span><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">ease-out</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> // </span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">动画以低速结束</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">animation-timing-function</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">: </span><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">ease-in-out</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> // </span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">动画以低速开始和结束</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">animation-timing-function</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">: linear;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> // </span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">匀速，动画从头到尾的速度是相同的</span></span></code></pre></div><p><a href="https://user-images.githubusercontent.com/8554143/146725564-792c47d1-ec72-43bd-9727-764829420598.png" target="_blank" rel="noreferrer">![img]./img/146725564-792c47d1-ec72-43bd-9727-764829420598.png)</a></p><p>关于它们之间的效果对比：</p><p><a href="https://user-images.githubusercontent.com/8554143/146726635-0cf26c6a-40eb-4dd5-8d28-f6d369773949.gif" target="_blank" rel="noreferrer">![img]./img/146726635-0cf26c6a-40eb-4dd5-8d28-f6d369773949.gif)</a></p><p>除了 CSS 支持的这 5 个关键字，我们还可以使用 <code>cubic-bezier()</code> 方法自定义三次贝塞尔曲线：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">animation-timing-function</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;">: cubic-bezier(0</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;"> 0</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">7</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#C678DD;--shiki-dark:#BABED8;"> 0</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>这里有个非常好用的网站 -- <a href="https://cubic-bezier.com/#.25,.1,.25,1" target="_blank" rel="noreferrer">cubic-bezier</a> 用于创建和调试生成不同的贝塞尔曲线参数。</p><h3 id="三次贝塞尔曲线缓动对动画的影响" tabindex="-1">三次贝塞尔曲线缓动对动画的影响 <a class="header-anchor" href="#三次贝塞尔曲线缓动对动画的影响" aria-label="Permalink to &quot;三次贝塞尔曲线缓动对动画的影响&quot;">​</a></h3><p>关于缓动函数对动画的影响，这里有一个非常好的示例。这里我们使用了纯 CSS 实现了一个钟的效果，对于其中的动画的运动，如果是 <code>animation-timing-function: linear</code>，效果如下：</p><p><a href="https://user-images.githubusercontent.com/8554143/146766119-1098b124-7dfe-4f80-8e4d-1daa2d743e52.gif" target="_blank" rel="noreferrer">![b]./img/146766119-1098b124-7dfe-4f80-8e4d-1daa2d743e52.gif)</a></p><p>而如果我们我把缓动函数替换一下，变成 <code>animation-timing-function: cubic-bezier(1,-0.21,.85,1.29)</code>，它的曲线对应如下：</p><p><a href="https://user-images.githubusercontent.com/8554143/146766472-f14aa2ae-560b-4b78-9926-a865f98e5c35.png" target="_blank" rel="noreferrer">![img]./img/146766472-f14aa2ae-560b-4b78-9926-a865f98e5c35.png)</a></p><p>整个钟的动画律动效果将变成这样，完全不一样的感觉：</p>`,19),d=i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Tick Tock",src:"https://codepen.io/mafqla/embed/rNbabyY?default-tab=html%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/mafqla/pen/rNbabyY">
  Tick Tock</a> by mafqla (<a href="https://codepen.io/mafqla">@mafqla</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),F=s(`<p>对于许多精益求精的动画，在设计中其实都考虑到了缓动函数。我很久之前看到过一篇《基于物理学的动画用户体验设计》，可惜如今已经无法找到原文。其中传达出的一些概念是，动画的设计依据实际在生活中的表现去考量。</p><p>譬如 linear 这个缓动，实际应用于某些动画中会显得很不自然，因为由于空气阻力的存在，程序模拟的匀速直线运动在现实生活中是很难实现的。因此对于这样一个用户平时很少感知到的运动是很难建立信任感的。这样的匀速直线运动也是我们在进行动效设计时需要极力避免的。</p><h3 id="步骤缓动函数" tabindex="-1">步骤缓动函数 <a class="header-anchor" href="#步骤缓动函数" aria-label="Permalink to &quot;步骤缓动函数&quot;">​</a></h3><p>接下来再讲讲步骤缓动函数。在 CSS 的 <code>animation-timing-function</code> 中，它有如下几种表现形态：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /* Keyword values */</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    animation-timing-function</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> step-start</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    animation-timing-function</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> step-end</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /* Function values */</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    animation-timing-function</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> steps</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">6</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> start</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">    animation-timing-function: </span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;">steps</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">4</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> end</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>在 CSS 中，使用步骤缓动函数最多的，就是利用其来实现逐帧动画。假设我们有这样一张图（图片大小为 <code>1536 x 256</code>，图片来源于网络）：</p><p><a href="https://user-images.githubusercontent.com/8554143/148632440-616ea96c-e000-41fe-9510-7db15c6e9a8e.png" target="_blank" rel="noreferrer">![img]./img/148632440-616ea96c-e000-41fe-9510-7db15c6e9a8e.png)</a></p><p>可以发现它其实是一个人物行进过程中的 6 种状态，或者可以为 6 帧，我们利用 <code>animation-timing-function: steps(6)</code> 可以将其用一个 CSS 动画串联起来，代码非常的简单：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">box</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">box</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  width</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 256</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  height</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 256</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> url</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">https://github.com/iamalperen/playground/blob/main/SpriteSheetAnimation/sprite.png?raw=true</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> sprite </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">0.6</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> steps</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">6</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> end</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> sprite</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  0%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    background-position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    background-position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> -1536</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>简单解释一下上述代码，首先要知道，刚好 <code>256 x 6 = 1536</code>，所以上述图片其实可以刚好均分为 6 段：</p><ol><li>我们设定了一个大小都为 <code>256px</code> 的 div，给这个 div 赋予了一个 <code>animation: sprite .6s steps(6) infinite</code> 动画；</li><li>其中 <code>steps(6)</code> 的意思就是将设定的 <a href="https://github.com/Keyframes" target="_blank" rel="noreferrer">@Keyframes</a> 动画分为 6 次（6 帧）执行，而整体的动画时间是 <code>0.6s</code>，所以每一帧的停顿时长为 <code>0.1s</code>；</li><li>动画效果是由 <code>background-position: 0 0</code> 到 <code>background-position: -1536px 0</code>，由于上述的 CSS 代码没有设置 <code>background-repeat</code>，所以其实 <code>background-position: 0 0</code> 是等价于 <code>background-position: -1536px 0</code>，就是图片在整个动画过程中推进了一轮，只不过每一帧停在了特点的地方，一共 6 帧；</li></ol><p>将上述 1、2、3，3 个步骤画在图上简单示意：</p><p><a href="https://user-images.githubusercontent.com/8554143/148633306-a4338cab-c35b-44a6-ae0d-b44b202bfcbc.png" target="_blank" rel="noreferrer">![img]./img/148633306-a4338cab-c35b-44a6-ae0d-b44b202bfcbc.png)</a></p><p>从上图可知，其实在动画过程中，<code>background-position</code> 的取值其实只有 <code>background-position: 0 0</code>，<code>background-position: -256px 0</code>，<code>background-position: -512px 0</code> 依次类推一直到 <code>background-position: -1536px 0</code>，由于背景的 repeat 的特性，其实刚好回到原点，由此又重新开始新一轮同样的动画。</p><p>所以，整个动画就会是这样，每一帧停留 0.1s 后切换到下一帧（注意这里是个无限循环动画），：</p>`,16),o=i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Sprite Animation with steps() ",src:"https://codepen.io/mafqla/embed/xxebeqz?default-tab=html%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/mafqla/pen/xxebeqz">
  Sprite Animation with steps() </a> by mafqla (<a href="https://codepen.io/mafqla">@mafqla</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),g=s(`<h3 id="animation-duration-动画长短对动画的影响" tabindex="-1">animation-duration 动画长短对动画的影响 <a class="header-anchor" href="#animation-duration-动画长短对动画的影响" aria-label="Permalink to &quot;animation-duration 动画长短对动画的影响&quot;">​</a></h3><p>在这里再插入一个小章节，<code>animation-duration</code> 动画长短对动画的影响也是非常明显的。</p><p>在上述代码的基础上，我们再修改 <code>animation-duration</code>，缩短每一帧的时间就可以让步行的效果变成跑步的效果，同理，也可以增加每一帧的停留时间。让每一步变得缓慢，就像是在步行一样。</p><blockquote><p>需要提出的是，上文说的每一帧，和浏览器渲染过程中的 FPS 的每一帧不是同一个概念。</p></blockquote><p>看看效果，设置不同的 <code>animation-duration</code> 的效果（这里是 0.6s -&gt; 0.2s），GIF 录屏丢失了一些关键帧，实际效果会更好点：</p><p><a href="https://user-images.githubusercontent.com/8554143/148633639-66ceea90-94ea-4e1e-9bfe-38d4917a2a51.gif" target="_blank" rel="noreferrer">![img]./img/148633639-66ceea90-94ea-4e1e-9bfe-38d4917a2a51.gif)</a></p><p>当然，在 <code>steps()</code> 中，还有 <code>steps(6, start)</code> 和 <code>steps(6, end)</code> 的差异，也就是其中关键字 <code>start</code> 和 <code>end</code> 的差异。对于上述的无限动画而言，其实基本是可以忽略不计的，它主要是控制动画第一帧的开始和持续时长，比较小的一个知识点但是想讲明白需要比较长的篇幅，限于本文的内容，在这里不做展开，读者可以自行了解。</p><h3 id="同个动画效果的补间动画和逐帧动画演绎对比" tabindex="-1">同个动画效果的补间动画和逐帧动画演绎对比 <a class="header-anchor" href="#同个动画效果的补间动画和逐帧动画演绎对比" aria-label="Permalink to &quot;同个动画效果的补间动画和逐帧动画演绎对比&quot;">​</a></h3><p>上述的三次贝塞尔曲线缓动和步骤缓动，其实就是对应的补间动画和逐帧动画。</p><p>对于同个动画而言，有的时候两种缓动都是适用的。我们在具体使用的时候需要具体分析选取。</p><p>假设我们用 CSS 实现了这样一个图形：</p><p><a href="https://user-images.githubusercontent.com/8554143/148634225-4521a76c-a64f-44d3-9105-d51e8b6acc4e.png" target="_blank" rel="noreferrer">![img]./img/148634225-4521a76c-a64f-44d3-9105-d51e8b6acc4e.png)</a></p><p>现在想利用这个图形制作一个 Loading 效果，如果利用补间动画，也就是三次贝塞尔曲线缓动的话，让它旋转起来，得到的效果非常的一般：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">g-container</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> rotate </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> linear</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> rotate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  0%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> rotate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> rotate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">360</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">deg</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>动画效果如下：</p><p><a href="https://user-images.githubusercontent.com/8554143/148634303-2d8e6937-b58b-47f8-91ae-34305e59a57a.gif" target="_blank" rel="noreferrer">![img]./img/148634303-2d8e6937-b58b-47f8-91ae-34305e59a57a.gif)</a></p><p>但是如果这里，我们将补间动画换成逐帧动画，因为有 20 个点，所以设置成 steps(20)，再看看效果，会得到完全不一样的感觉：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">g-container</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> rotate </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> steps</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">20</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> rotate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  0%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> rotate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> rotate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">360</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">deg</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>动画效果如下：</p><p><a href="https://user-images.githubusercontent.com/8554143/148634332-613c9e2a-caf1-436c-ac1e-76bb22e56adb.gif" target="_blank" rel="noreferrer">![img]./img/148634332-613c9e2a-caf1-436c-ac1e-76bb22e56adb.gif)</a></p><p>整个 loading 的圈圈看上去好像也在旋转，实际上只是 20 帧关键帧在切换，整体的效果感觉更适合 Loading 的效果。</p><p>因此，两种动画效果都是很有必要掌握的，在实际使用的时候灵活尝试，选择更适合的。</p>`,22),D=i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Scale Loading steps vs linear",src:"https://codepen.io/mafqla/embed/RwONOpm?default-tab=html%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/mafqla/pen/RwONOpm">
  Scale Loading steps vs linear</a> by mafqla (<a href="https://codepen.io/mafqla">@mafqla</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),c=s(`<h2 id="animation-play-state" tabindex="-1">animation-play-state <a class="header-anchor" href="#animation-play-state" aria-label="Permalink to &quot;animation-play-state&quot;">​</a></h2><p>接下来，我们讲讲 <code>animation-play-state</code>，顾名思义，它可以控制动画的状态 -- 运行或者暂停。类似于视频播放器的开始和暂停。是 CSS 动画中有限的控制动画状态的手段之一。</p><p>它的取值只有两个（默认为 running）：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation-play-state</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> paused</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> | </span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">running</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>使用起来也非常简单，看下面这个例子，我们在 hover 按钮的时候，实现动画的暂停：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">btn stop</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">stop</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">animation</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  width</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  height</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> deeppink</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> move</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> linear</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> alternate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> move</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">stop</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">hover</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> ~</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> .</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation-play-state</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> paused</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>一个简单的 CSS 动画，但是当我们 hover 按钮的时候，给动画元素添加上 <code>animation-play-state: paused</code>：</p><p><a href="https://user-images.githubusercontent.com/8554143/148635816-4858dde3-8ea4-4ccb-a846-d9639a3de395.gif" target="_blank" rel="noreferrer">![img]./img/148635816-4858dde3-8ea4-4ccb-a846-d9639a3de395.gif)</a></p><h3 id="animation-play-state-小技巧-默认暂停-点击运行" tabindex="-1">animation-play-state 小技巧，默认暂停，点击运行 <a class="header-anchor" href="#animation-play-state-小技巧-默认暂停-点击运行" aria-label="Permalink to &quot;animation-play-state 小技巧，默认暂停，点击运行&quot;">​</a></h3><p>正常而言，按照正常思路使用 <code>animation-play-state: paused</code> 是非常简单的。</p><p>但是，如果我们想创造一些有意思的 CSS 动画效果，不如反其道而行之。</p><p>我们都知道，正常情况下，动画应该是运行状态，那如果我们将一些动画的默认状态设置为暂停，只有当鼠标点击或者 hover 的时候，才设置其 <code>animation-play-state: running</code>，这样就可以得到很多有趣的 CSS 效果。</p><p>看个倒酒的例子，这是一个纯 CSS 动画，但是默认状态下，动画处于 <code>animation-play-state: paused</code>，也就是暂停状态，只有当鼠标点击杯子的时，才设置 <code>animation-play-state: running</code>，让酒倒下，利用 <code>animation-play-state</code> 实现了一个非常有意思的交互效果：</p>`,14),y=i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"CSS BEER!",src:"https://codepen.io/mafqla/embed/BaEyERN?default-tab=html%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/mafqla/pen/BaEyERN">
  CSS BEER!</a> by mafqla (<a href="https://codepen.io/mafqla">@mafqla</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),A=s(`<p>在非常多 Web 创意交互动画我们都可以看到这个技巧的身影。</p><ol><li>页面 render 后，无任何操作，动画不会开始。只有当鼠标对元素进行 <code>click</code> ，通过触发元素的 <code>:active</code> 伪类效果的时候，赋予动画 <code>animation-play-state: running</code>，动画才开始进行；</li><li>动画进行到任意时刻，鼠标停止点击，伪类消失，则动画停止；</li></ol><h2 id="animation-fill-mode-控制元素在各个阶段的状态" tabindex="-1">animation-fill-mode 控制元素在各个阶段的状态 <a class="header-anchor" href="#animation-fill-mode-控制元素在各个阶段的状态" aria-label="Permalink to &quot;animation-fill-mode 控制元素在各个阶段的状态&quot;">​</a></h2><p>下一个属性 <code>animation-fill-mode</code>，很多人会误认为它只是用于控制元素在动画结束后是否复位。这个其实是不准确的，不全面的。</p><p>看看它的取值：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">  // 默认值，当动画未执行时，动画将不会将任何样式应用于目标，而是使用赋予给该元素的 CSS 规则来显示该元素的状态</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation-fill-mode</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> none</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">  // 动画将在应用于目标时立即应用第一个关键帧中定义的值，并在 \`</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">animation-delay</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">\` 期间保留此值，</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation-fill-mode</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> backwards</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">  // 目标将保留由执行期间遇到的最后一个关键帧计算值。 最后一个关键帧取决于 \`</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">animation-direction</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">\` 和 \`</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">animation-iteration-count</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">\`</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation-fill-mode</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> forwards</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">  // 动画将遵循 \`forwards\` 和 \`backwards\` 的规则，从而在两个方向上扩展动画属性</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation-fill-mode</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> both</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>对于 <code>animation-fill-mode</code> 的解读，我在 Segment Fault 上的一个问答中（<a href="https://segmentfault.com/q/1010000003867335" target="_blank" rel="noreferrer">SF - 如何理解 animation-fill-mode</a>）看到了 4 副很好的解读图，这里借用一下：</p><p>假设 HTML 如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">box</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><p>CSS 如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">box</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translateY</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">box</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">on</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> move</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> move</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  from</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translateY</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">-50</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  to</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translateY</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">50</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>使用图片来表示 <code>translateY</code> 的值与 <strong>时间</strong> 的关系：</p><ul><li>横轴为表示 <strong>时间</strong>，为 0 时表示动画开始的时间，也就是向 box 加上 on 类名的时间，横轴一格表示 0.5s</li><li>纵轴表示 <code>translateY</code> 的值，为 0 时表示 <code>translateY</code> 的值为 0，纵轴一格表示 <code>50px</code></li></ul><ol><li><code>animation-fill-mode: none</code> 表现如图：</li></ol><p><a href="https://user-images.githubusercontent.com/8554143/148670830-b459b0be-5ee7-4ef5-90ce-38176a802bee.png" target="_blank" rel="noreferrer">![img]./img/148670830-b459b0be-5ee7-4ef5-90ce-38176a802bee.png)</a></p><p>一句话总结，元素在动画时间之外，样式只受到它的 CSS 规则限制，与 <a href="https://github.com/Keyframes" target="_blank" rel="noreferrer">@Keyframes</a> 内的关键帧定义无关。</p><ol><li><code>animation-fill-mode: backwards</code> 表现如图：</li></ol><p><a href="https://user-images.githubusercontent.com/8554143/148670976-712e82c7-c36f-48b4-8708-9e15456a84a8.png" target="_blank" rel="noreferrer">![img]./img/148670976-712e82c7-c36f-48b4-8708-9e15456a84a8.png)</a></p><p>一句话总结，元素在动画开始之前（包含未触发动画阶段及 <code>animation-delay</code> 期间）的样式为动画运行时的第一帧，而动画结束后的样式则恢复为 CSS 规则设定的样式。</p><ol><li><code>animation-fill-mode: forwards</code> 表现如图：</li></ol><p><a href="https://user-images.githubusercontent.com/8554143/148671033-13d34ce1-4da7-41a3-ad2e-a1a8838ff154.png" target="_blank" rel="noreferrer">![img]./img/148671033-13d34ce1-4da7-41a3-ad2e-a1a8838ff154.png)</a></p><p>一句话总结，元素在动画开始之前的样式为 CSS 规则设定的样式，而动画结束后的样式则表现为由执行期间遇到的最后一个关键帧计算值（也就是停在最后一帧）。</p><ol><li><code>animation-fill-mode: both</code> 表现如图：</li></ol><p><a href="https://user-images.githubusercontent.com/8554143/148671092-1d0493ae-1d37-4032-8d20-cf49b4e12298.png" target="_blank" rel="noreferrer">![img]./img/148671092-1d0493ae-1d37-4032-8d20-cf49b4e12298.png)</a></p><p>一句话总结，综合了 <code>animation-fill-mode: backwards</code> 和 <code>animation-fill-mode: forwards</code> 的设定。动画开始前的样式为动画运行时的第一帧，动画结束后停在最后一帧。</p><h2 id="animation-iteration-count-animation-direction-动画循环次数和方向" tabindex="-1">animation-iteration-count/animation-direction 动画循环次数和方向 <a class="header-anchor" href="#animation-iteration-count-animation-direction-动画循环次数和方向" aria-label="Permalink to &quot;animation-iteration-count/animation-direction 动画循环次数和方向&quot;">​</a></h2><p>讲到了 <code>animation-fill-mode</code>，我们就可以顺带讲讲这个两个比较好理解的属性 -- <code>animation-iteration-count</code> 和 <code>animation-direction</code></p><ul><li><code>animation-iteration-count</code> 控制动画运行的次数，可以是数字或者 <code>infinite</code>，注意，数字可以是小数</li><li><code>animation-direction</code> 控制动画的方向，正向、反向、正向交替与反向交替</li></ul><p>在上面讲述 <code>animation-fill-mode</code> 时，我使用了<strong>动画运行时的第一帧</strong>替代了<a href="https://github.com/Keyframes" target="_blank" rel="noreferrer">@Keyframes</a> 中定义的第一帧这种说法，因为动画运行的第一帧和最后一帧的实际状态还会受到动画运行方向 <code>animation-direction</code> 和 <code>animation-iteration-count</code> 的影响。</p><p>在 CSS 动画中，由 <code>animation-iteration-count</code> 和 <code>animation-direction</code> 共同决定动画运行时的第一帧和最后一帧的状态。</p><ol><li>动画运行的第一帧由 <code>animation-direction</code> 决定</li><li>动画运行的最后一帧由 <code>animation-iteration-count</code> 和 <code>animation-direction</code> 决定</li></ol><p>动画的最后一帧，也就是动画运行的最终状态，并且我们可以利用 <code>animation-fill-mode: forwards</code> 让动画在结束后停留在这一帧，这个还是比较好理解的，但是 <code>animation-fill-mode: backwards</code> 和 <code>animation-direction</code> 的关系很容易弄不清楚，这里简答讲解下。</p><p>设置一个 <code>100px x 100px</code> 的滑块，在一个 <code>400px x 100px</code> 的容器中，其代码如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">g-father</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">g-box</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">g-father</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  width</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 400</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  height</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  border</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> solid</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> #</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">000</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">g-box</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  width</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  height</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> #</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">333</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>表现如下：</p><p><a href="https://user-images.githubusercontent.com/8554143/148688217-df523745-e0ab-423c-b616-04ac4813fa12.png" target="_blank" rel="noreferrer">![img]./img/148688217-df523745-e0ab-423c-b616-04ac4813fa12.png)</a></p><p>那么，加入 <code>animation</code> 之后，在不同的 <code>animation-iteration-count</code> 和 <code>animation-direction</code> 作用下，动画的初始和结束状态都不一样。</p><p>如果设置了 <code>animation-fill-mode: backwards</code>，则元素在动画未开始前的状态由 <code>animation-direction</code> 决定：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">g-box</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> move</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 4</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> linear</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    animation-play-state</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> paused</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> move</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">    0%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">        transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">    100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">        transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">300</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>注意这里 CSS 规则中，元素没有设置位移 <code>transform: translate(0, 0)</code>，而在动画中，第一个关键帧和最后一个关键的 translateX 分别是 <code>100px</code>、<code>300px</code>，配合不同的 <code>animation-direction</code> 初始状态如下。</p><p>下图假设我们设置了动画默认是暂停的 -- <code>animation-play-state: paused</code>，那么动画在开始前的状态为：</p><p><a href="https://user-images.githubusercontent.com/8554143/148688803-234c6178-3eb9-4e0b-9967-25515db8a027.png" target="_blank" rel="noreferrer">![img]./img/148688803-234c6178-3eb9-4e0b-9967-25515db8a027.png)</a></p><h2 id="动画的分治与复用" tabindex="-1">动画的分治与复用 <a class="header-anchor" href="#动画的分治与复用" aria-label="Permalink to &quot;动画的分治与复用&quot;">​</a></h2><p>讲完了每一个属性，我们再来看看一些动画使用过程中的细节。</p><p>看这样一个动画：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  width</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  height</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;"> #</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">000</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> combine </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> combine</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 150</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    opacity</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>这里我们实现了一个 div 块下落动画，下落的同时产生透明度的变化：</p><p><a href="https://user-images.githubusercontent.com/8554143/148764642-e4fd3ce6-ff67-4581-bf7a-f74904ea3a91.gif" target="_blank" rel="noreferrer">![img]./img/148764642-e4fd3ce6-ff67-4581-bf7a-f74904ea3a91.gif)</a></p><p>对于这样一个多个属性变化的动画，它其实等价于：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> falldown </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> fadeIn </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> falldown</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    transform</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> translate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 150</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> fadeIn</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    opacity</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>在 CSS 动画规则中，<code>animation</code> 是可以接收多个动画的，这样做的目的不仅仅只是为了<strong>复用</strong>，同时也是为了<strong>分治</strong>，我们对每一个属性层面的动画能够有着更为精确的控制。</p><h2 id="keyframes-规则的设定" tabindex="-1">keyframes 规则的设定 <a class="header-anchor" href="#keyframes-规则的设定" aria-label="Permalink to &quot;keyframes 规则的设定&quot;">​</a></h2><p>我们经常能够在各种不同的 CSS 代码见到如下两种 CSS <code>@keyframes</code> 的设定：</p><ol><li>使用百分比</li></ol><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> fadeIn</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  0%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    opacity</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    opacity</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><ol><li>使用 <code>from</code> 及 <code>to</code></li></ol><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> fadeIn</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  from</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    opacity</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  to</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    opacity</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>在 CSS 动画 <code>@keyframes</code> 的定义中，<code>from</code> 等同于 <code>0%</code>，而 <code>to</code> 等同于 <code>100%</code>。</p><p>当然，当我们的关键帧不止 2 帧的时，更推荐使用百分比定义的方式。</p><p>除此之外，当动画的起始帧等同于 CSS 规则中赋予的值并且没有设定 <code>animation-fill-mode</code>，<code>0%</code> 和 <code>from</code> 这一帧是可以删除的。</p><h2 id="动画状态的高优先级性" tabindex="-1">动画状态的高优先级性 <a class="header-anchor" href="#动画状态的高优先级性" aria-label="Permalink to &quot;动画状态的高优先级性&quot;">​</a></h2><p>这也是很多人对 CSS 优先级的一个认知误区，<strong>在 CSS 中，优先级还需要考虑选择器的层叠（级联）顺序</strong>。</p><p>只有在层叠顺序相等时，使用哪个值才取决于样式的优先级。</p><p>那什么是层叠顺序呢？</p><p>根据 CSS Cascading 4 最新标准：</p><p><a href="https://www.w3.org/TR/css-cascade-5/#cascade-sort" target="_blank" rel="noreferrer">CSS Cascading and Inheritance Level 5(Current Work)</a></p><p>定义的当前规范下申明的层叠顺序优先级如下（越往下的优先级越高，下面的规则按升序排列）：</p><ul><li>Normal user agent declarations</li><li>Normal user declarations</li><li>Normal author declarations</li><li>Animation declarations</li><li>Important author declarations</li><li>Important user declarations</li><li>Important user agent declarations</li><li>Transition declarations</li></ul><p>简单翻译一下：</p><p><a href="https://user-images.githubusercontent.com/8554143/72442231-16efaa80-37e7-11ea-8de5-5045f6730bff.png" target="_blank" rel="noreferrer">![img]./img/72442231-16efaa80-37e7-11ea-8de5-5045f6730bff.png)</a></p><p>按照上述算法，大概是这样：</p><p>过渡动画过程中每一帧的样式 &gt; 用户代理、用户、页面作者设置的!important 样式 &gt; 动画过程中每一帧的样式优先级 &gt; 页面作者、用户、用户代理普通样式。</p><p>然而，经过多个浏览器的测试，实际上并不是这样。（尴尬了）</p><p>举个例子，我们可以通过这个特性，覆盖掉行内样式中的 <code>!important</code> 样式：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">p</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">txt</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> style</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">color:red!important</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">123456789</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">p</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">txt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  animation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> colorGreen </span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">s</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> infinite</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#89DDFF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@keyframes</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> colorGreen</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  0%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">,</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#FFCB6B;">  100%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    color</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> green</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>在 Safari 浏览器下，上述 DEMO 文本的颜色为<strong>绿色</strong>，也就是说，处于动画状态中的样式，能够覆盖掉行内样式中的 <code>!important</code> 样式，属于最最高优先级的一种样式，我们可以通过无限动画、或者 <code>animation-fill-mode: forwards</code>，利用这个技巧，覆盖掉本来应该是优先级非常非常高的行内样式中的 <code>!important</code> 样式。</p><p>我在早两年的 Chrome 中也能得到同样的结果，但是到今天（2022-01-10），最新版的 Chrome 已经不支持动画过程中关键帧样式优先级覆盖行内样式 <code>!important</code> 的特性。</p><h2 id="css-动画的优化" tabindex="-1">CSS 动画的优化 <a class="header-anchor" href="#css-动画的优化" aria-label="Permalink to &quot;CSS 动画的优化&quot;">​</a></h2><p>这也是非常多人非常关心的一个重点。</p><p>我的 CSS 动画很卡，我应该如何去优化它？</p><h3 id="动画元素生成独立的-graphicslayer-强制开始-gpu-加速" tabindex="-1">动画元素生成独立的 GraphicsLayer，强制开始 GPU 加速 <a class="header-anchor" href="#动画元素生成独立的-graphicslayer-强制开始-gpu-加速" aria-label="Permalink to &quot;动画元素生成独立的 GraphicsLayer，强制开始 GPU 加速&quot;">​</a></h3><p>CSS 动画很卡，其实是一个现象描述，它的本质其实是在动画过程中，<strong>浏览器刷新渲染页面的帧率过低</strong>。通常而言，目前大多数浏览器刷新率为 60 次/秒，所以通常来讲 FPS 为 60 frame/s 时动画效果较好，也就是每帧的消耗时间为 16.67ms。</p><p>页面处于动画变化时，当帧率低于一定数值时，我们就感觉到页面的卡顿。</p><p>而造成帧率低的原因就是浏览器在一帧之间处理的事情太多了，超过了 16.67ms，要优化每一帧的时间，又需要完整地知道浏览器在每一帧干了什么，这个就又涉及到了老生常谈的浏览器渲染页面。</p><p>到今天，虽然不同浏览器的渲染过程不完全相同，但是基本上大同小异，基本上都是：</p><p><a href="https://user-images.githubusercontent.com/8554143/148769727-cbb33786-f02c-4078-8c8e-386fd01bcc62.png" target="_blank" rel="noreferrer">![img]./img/148769727-cbb33786-f02c-4078-8c8e-386fd01bcc62.png)</a></p><p>简化一下也就是这个图：</p><p><a href="https://user-images.githubusercontent.com/8554143/148769777-01545ab1-9098-49a0-acb2-e4996e043028.png" target="_blank" rel="noreferrer">![img]./img/148769777-01545ab1-9098-49a0-acb2-e4996e043028.png)</a></p><p>这两张图，你可以在非常多不同的文章中看到。</p><p>回归本文的重点，Web 动画很大一部分开销在于层的重绘，以层为基础的复合模型对渲染性能有着深远的影响。当不需要绘制时，复合操作的开销可以忽略不计，因此在试着调试渲染性能问题时，首要目标就是要避免层的重绘。那么这就给动画的性能优化提供了方向，<strong>减少元素的重绘与回流</strong>。</p><p>这其中，如何减少页面的回流与重绘呢，这里就会运用到我们常说的** GPU 加速**。</p><p>GPU 加速的本质其实是减少浏览器渲染页面每一帧过程中的 reflow 和 repaint，其根本，就是让需要进行动画的元素，生成自己的 <strong>GraphicsLayer</strong>。</p><p>浏览器渲染一个页面时，它使用了许多没有暴露给开发者的中间表现形式，其中最重要的结构便是层(layer)。</p><p>在 Chrome 中，存在有不同类型的层： RenderLayer(负责 DOM 子树)，GraphicsLayer(负责 RenderLayer 的子树)。</p><p>GraphicsLayer ，它对于我们的 Web 动画而言非常重要，通常，Chrome 会将一个层的内容在作为纹理上传到 GPU 前先绘制(paint)进一个位图中。如果内容不会改变，那么就没有必要重绘(repaint)层。</p><p>而当元素生成了自己的 GraphicsLayer 之后，在动画过程中，Chrome 并不会始终重绘整个层，它会尝试智能地去重绘 DOM 中失效的部分，也就是发生动画的部分，在 Composite 之前，页面是处于一种分层状态，借助 GPU，浏览器仅仅在每一帧对生成了自己独立 GraphicsLayer 元素层进行重绘，如此，大大的降低了整个页面重排重绘的开销，提升了页面渲染的效率。</p><p>因此，CSS 动画（Web 动画同理）优化的第一条准则就是<strong>让需要动画的元素生成了自己独立的 GraphicsLayer，强制开始 GPU 加速</strong>，而我们需要知道是，GPU 加速的本质是利用让元素生成了自己独立的 GraphicsLayer，降低了页面在渲染过程中重绘重排的开销。</p><p>当然，生成自己的独立的 GraphicsLayer，不仅仅只有 transform3d api，还有非常多的方式。在 CSS 中，包括但不限于（找了很多文档，没有很全面的，需要一个一个去尝试，通过开启 Chrome 的 Layer border 选项）：</p><ul><li>3D 或透视变换(perspective、transform) CSS 属性</li><li>使用加速视频解码的</li><li>拥有 3D (WebGL) 上下文或加速的 2D 上下文的 元素</li><li>混合插件(如 Flash)</li><li>对自己的 opacity 做 CSS 动画或使用一个动画变换的元素</li><li>拥有加速 CSS 过滤器的元素</li><li>元素有一个包含复合层的后代节点(换句话说，就是一个元素拥有一个子元素，该子元素在自己的层里)</li><li>元素有一个 z-index 较低且包含一个复合层的兄弟元素(换句话说就是该元素在复合层上面渲染)</li></ul><p>除了上述准则之外，还有一些提升 CSS 动画性能的建议：</p><h3 id="减少使用耗性能样式" tabindex="-1">减少使用耗性能样式 <a class="header-anchor" href="#减少使用耗性能样式" aria-label="Permalink to &quot;减少使用耗性能样式&quot;">​</a></h3><p>不同样式在消耗性能方面是不同的，改变一些属性的开销比改变其他属性要多，因此更可能使动画卡顿。</p><p>例如，与改变元素的文本颜色相比，改变元素的 <code>box-shadow</code> 将需要开销大很多的绘图操作。<code>box-shadow</code> 属性，从渲染角度来讲十分耗性能，原因就是与其他样式相比，它们的绘制代码执行时间过长。这就是说，如果一个耗性能严重的样式经常需要重绘，那么你就会遇到性能问题。</p><p>类似的还有 CSS 3D 变换、<code>mix-blend-mode</code>、<code>filter</code>，这些样式相比其他一些简单的操作，会更加的消耗性能。我们应该尽可能的在动画过程中降低其使用的频率或者寻找替代方案。</p><p>当然，没有不变的事情，在今天性能很差的样式，可能明天就被优化，并且浏览器之间也存在差异。</p><p>因此关键在于，我们需要针对每一起卡顿的例子，借助开发工具来分辨出性能瓶颈所在，然后设法减少浏览器的工作量。学会 Chrome 开发者工具的 Performance 面板及其他渲染相关的面板非常重要，当然这不是本文的重点。大家可以自行探索。</p><h3 id="使用-will-change-提高页面滚动、动画等渲染性能" tabindex="-1">使用 will-change 提高页面滚动、动画等渲染性能 <a class="header-anchor" href="#使用-will-change-提高页面滚动、动画等渲染性能" aria-label="Permalink to &quot;使用 will-change 提高页面滚动、动画等渲染性能&quot;">​</a></h3><p><code>will-change</code> 为 Web 开发者提供了一种告知浏览器该元素会有哪些变化的方法，这样浏览器可以在元素属性真正发生变化之前提前做好对应的优化准备工作。 这种优化可以将一部分复杂的计算工作提前准备好，使页面的反应更为快速灵敏。</p><p>值得注意的是，用好这个属性并不是很容易：</p><ul><li>不要将 <code>will-change</code> 应用到太多元素上：浏览器已经尽力尝试去优化一切可以优化的东西了。有一些更强力的优化，如果与 will-change 结合在一起的话，有可能会消耗很多机器资源，如果过度使用的话，可能导致页面响应缓慢或者消耗非常多的资源。</li><li>有节制地使用：通常，当元素恢复到初始状态时，浏览器会丢弃掉之前做的优化工作。但是如果直接在样式表中显式声明了 <code>will-change</code> 属性，则表示目标元素可能会经常变化，浏览器会将优化工作保存得比之前更久。所以最佳实践是当元素变化之前和之后通过脚本来切换 <code>will-change</code> 的值。</li><li>不要过早应用 <code>will-change</code> 优化：如果你的页面在性能方面没什么问题，则不要添加 <code>will-change</code> 属性来榨取一丁点的速度。 <code>will-change</code> 的设计初衷是作为最后的优化手段，用来尝试解决现有的性能问题。它不应该被用来预防性能问题。过度使用 <code>will-change</code> 会导致大量的内存占用，并会导致更复杂的渲染过程，因为浏览器会试图准备可能存在的变化过程。这会导致更严重的性能问题。</li><li>给它足够的工作时间：这个属性是用来让页面开发者告知浏览器哪些属性可能会变化的。然后浏览器可以选择在变化发生前提前去做一些优化工作。所以给浏览器一点时间去真正做这些优化工作是非常重要的。使用时需要尝试去找到一些方法提前一定时间获知元素可能发生的变化，然后为它加上 <code>will-change</code> 属性。</li></ul><p>有人说 <code>will-change</code> 是良药，也有人说是毒药，在具体使用的时候，可以多测试一下。</p>`,114),C=[e,p,k,B,r,d,F,o,g,D,c,y,A];function m(f,u,b,E,v,S){return t(),n("div",null,C)}const x=a(l,[["render",m]]);export{q as __pageData,x as default};
