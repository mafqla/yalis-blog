import{_ as s,c as a,o as n,V as i,m as e}from"./chunks/framework.bW6FiXxS.js";const t="/assets/29648435-b2a9940a-88c0-11e7-9b7b-1ca69e371921.QV0O0lfb.png",y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/FrontEnd/css/1-基础/33-fixed 定位失效.md","filePath":"knowledge/FrontEnd/css/1-基础/33-fixed 定位失效.md","lastUpdated":1714441522000}'),l={name:"knowledge/FrontEnd/css/1-基础/33-fixed 定位失效.md"},p=i('<h2 id="失效的-position-fixed" tabindex="-1">失效的 <code>position:fixed</code> <a class="header-anchor" href="#失效的-position-fixed" aria-label="Permalink to &quot;失效的 `position:fixed`&quot;">​</a></h2><p>在许多情况下，<code>position:fixed</code> 将会失效。<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noreferrer">MDN</a> 用一句话概括了这种情况：</p><ul><li>当元素祖先的 transform 属性非 none 时，容器由视口改为该祖先。</li></ul><p>What！还有这种操作？可能有部分同学还没 get 到上面这句话的意思，通俗的讲就是指定了 <code>position:fixed</code> 的元素，如果其祖先元素存在非 none 的 transform 值 ，那么该元素将相对于设定了 <code>transform</code> 的祖先元素进行定位。</p><p>那么，为什么会发生这种情况呢？说好的相对视口（Viewport）定位呢？</p><p>这个问题，就牵涉到了 Stacking Context ，也就是堆叠上下文的概念了。解释上面的问题分为两步：</p><ol><li>任何非 none 的 transform 值都会导致一个堆叠上下文（Stacking Context）和包含块（Containing Block）的创建。</li><li>由于堆叠上下文的创建，该元素会影响其子元素的固定定位。设置了 <code>position:fixed</code> 的子元素将不会基于 viewport 定位，而是基于这个父元素。</li></ol><h2 id="stacking-context-堆叠上下文" tabindex="-1">Stacking Context -- 堆叠上下文 <a class="header-anchor" href="#stacking-context-堆叠上下文" aria-label="Permalink to &quot;Stacking Context -- 堆叠上下文&quot;">​</a></h2><p>好的嘛，好的嘛，又冒出新的名词了，堆叠上下文（又译作层叠上下文），又是什么？</p><p><strong>堆叠上下文（Stacking Context）</strong>：堆叠上下文是 HTML 元素的三维概念，这些 HTML 元素在一条假想的相对于面向（电脑屏幕的）视窗或者网页的用户的 z 轴上延伸，HTML 元素依据其自身属性按照优先级顺序占用层叠上下文的空间。</p><p>概念比较抽象，简单理解，记住 <strong>生成了 Stacking Context 的元素会影响该元素的层叠关系与定位关系</strong>。</p><p>而本文提到了<strong>生成了 Stacking Context 的元素会影响该元素定位关系</strong> 。按照上面的说法，堆叠上下文的创建，该元素会影响其子元素的固定定位。设置了 <code>position:fixed</code> 的子元素将不会基于 viewport 定位，而是基于这个父元素。</p><p>那么问题来了，是否所有能够生成堆叠上下文的元素，都会使得其子元素的 <code>position:fixed</code> 相对它，而不是相对视口（Viewport）进行定位呢？</p><h2 id="创建堆叠上下文的方式" tabindex="-1">创建堆叠上下文的方式 <a class="header-anchor" href="#创建堆叠上下文的方式" aria-label="Permalink to &quot;创建堆叠上下文的方式&quot;">​</a></h2><p>为此，首先要找到所有能够使元素生成堆叠上下文的方法。</p><p>So，如何触发一个元素形成 <code>堆叠上下文</code> ？方法如下（参考自 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context" target="_blank" rel="noreferrer">MDN</a>）：</p><ul><li>根元素 (HTML),</li><li>z-index 值不为 &quot;auto&quot;的 绝对/相对定位</li><li>一个 z-index 值不为 &quot;auto&quot;的 flex 项目 (flex item)，即：父元素 display: flex|inline-flex</li><li>opacity 属性值小于 1 的元素（参考 the specification for opacity）</li><li>transform 属性值不为 &quot;none&quot;的元素</li><li>mix-blend-mode 属性值不为 &quot;normal&quot;的元素</li><li>filter值不为“none”的元素</li><li>perspective值不为“none”的元素，</li><li>isolation 属性被设置为 &quot;isolate&quot;的元素</li><li>position: fixed</li><li>在 will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值</li><li>-webkit-overflow-scrolling 属性被设置 &quot;touch&quot;的元素</li><li>backdrop-filter 值不为“none”的元素</li></ul><p>接下来，我们要验证，是否所有设置了上面属性样式之一的元素，都有使其子元素的 <code>position: fixed</code> 失效的能力？</p><p>为此我做了下面一个小实验，基于最新的 Blink 内核。可戳：</p>',19),h=e("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"层叠上下文对 fixed 定位的影响（基于不同浏览器内核结果不同）",src:"https://codepen.io/mafqla/embed/YzgqRzL?default-tab=html%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/mafqla/pen/YzgqRzL">
  层叠上下文对 fixed 定位的影响（基于不同浏览器内核结果不同）</a> by mafqla (<a href="https://codepen.io/mafqla">@mafqla</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),k=i('<p><img src="'+t+`" alt="image" loading="lazy"></p><p>我们设置两个父子 div，子元素 <code>fixed</code> 定位，通过修改父元素生成层叠上下文，观察子元素的 <code>fixed</code> 定位是否不再相对视口。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">container</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">fixed</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> &lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><p>最初的 CSS ：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">container</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    width</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">10</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">vw</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    height</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 10</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">vw</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> rgba</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">255</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> .8</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">fixed</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> fixed</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    top</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">vw</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    left</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">vw</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    right</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">vw</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    bottom</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">vw</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">    background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#82AAFF;"> rgba</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">100</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 255</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> .8</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><h2 id="一探-position-fixed-失效的最终原因" tabindex="-1">一探 <code>position:fixed</code> 失效的最终原因 <a class="header-anchor" href="#一探-position-fixed-失效的最终原因" aria-label="Permalink to &quot;一探 \`position:fixed\` 失效的最终原因&quot;">​</a></h2><p>通过上面的试验，在最新的 Blink 内核下，发现并不是所有能够生成层叠上下文的元素都会使得 <code>position:fixed</code> 失效，但也不止 <code>transform</code> 会使 <code>position:fixed</code> 失效。</p><p>所以，MDN 关于 <code>position:fixed</code> 的补充描述不够完善。下述 7 种方式目前都会使得 <code>position:fixed</code> 定位的基准元素改变（<strong>本文重点</strong>）：</p><ol><li><code>transform</code> 属性值不为 none 的元素</li><li>设置了 <code>transform-style</code>: preserve-3d 的元素</li><li><code>perspective</code> 值不为 none 的元素</li><li>在 <code>will-change</code> 中指定了任意 CSS 属性</li><li>设置了 <code>contain: paint</code></li><li>filter值不为 <code>none</code> 的元素</li><li>backdrop-filter 值不为 <code>none</code>的元素</li></ol><blockquote><p>2021-01-08 更新，最近发现，<code>contain: paint</code> 也会生成新的堆叠上下文 2021-07-01 更新，backdrop-filter 值不为 <code>none</code>的元素，也会生成新的堆叠上下文</p></blockquote><h2 id="不同内核的不同表现" tabindex="-1">不同内核的不同表现 <a class="header-anchor" href="#不同内核的不同表现" aria-label="Permalink to &quot;不同内核的不同表现&quot;">​</a></h2><p>上面也谈到了，上述结论是在最新的 Chrome 浏览器下（Blink内核），经过测试发现，在 MAC 下的 Safari 浏览器（WebKit内核，Version 9.1.2 (11601.7.7)）和 IE Trident/ 内核及 Edge 浏览器下，上述三种方式都不会改变 <code>position: fixed</code> 的表现！</p><p>所以，当遇到 <code>position: fixed</code> 定位基准元素改变的时候，需要具体问题具体分析，多尝试一下，根据需要兼容适配的浏览器作出调整，不能一概而论。</p>`,13),o=[p,h,k];function d(r,F,c,B,g,D){return n(),a("div",null,o)}const A=s(l,[["render",d]]);export{y as __pageData,A as default};
