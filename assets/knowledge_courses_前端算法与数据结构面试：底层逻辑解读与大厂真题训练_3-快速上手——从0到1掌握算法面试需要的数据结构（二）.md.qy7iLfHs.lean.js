import{_ as n,c as h,m as s,a as i,J as t,w as l,V as k,E as p,o as e}from"./chunks/framework.bW6FiXxS.js";const B="/assets/1.7RLns18i.image",r="/assets/2.VX9z_9lJ.image",d="/assets/3.am6rcwKz.image",F="/assets/4.fzAGMAQu.image",g="/assets/5.g4-16P5l.image",y="/assets/6.IwnFabna.image",D="/assets/7.5pXoRXFP.image",o="/assets/8.Jv0xo8BD.image",c="/assets/9.C_iZ-dKr.image",A="/assets/10.rB2-aCna.image",E="/assets/11.ho18pIaN.image",C="/assets/12.Xsl0oOMg.image",u="/assets/13.G7mym8D_.image",m="/assets/14.KM61-rq8.image",v="/assets/15.0_-dRmXW.image",_="/assets/16.E-GAY7lC.image",f="/assets/17.oXqEqSd5.image",X=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/courses/前端算法与数据结构面试：底层逻辑解读与大厂真题训练/3-快速上手——从0到1掌握算法面试需要的数据结构（二）.md","filePath":"knowledge/courses/前端算法与数据结构面试：底层逻辑解读与大厂真题训练/3-快速上手——从0到1掌握算法面试需要的数据结构（二）.md","lastUpdated":1711348514000}'),b={name:"knowledge/courses/前端算法与数据结构面试：底层逻辑解读与大厂真题训练/3-快速上手——从0到1掌握算法面试需要的数据结构（二）.md"},x=s("p",null,"本节我们基于对数组的理解和掌握，围剿线性数据结构（栈、队列和链表）。",-1),q=s("h2",{id:"栈和队列",tabindex:"-1"},[i("栈和队列 "),s("a",{class:"header-anchor",href:"#栈和队列","aria-label":'Permalink to "栈和队列"'},"​")],-1),j=s("p",null,[i("在 JavaScript 中，"),s("strong",null,"栈和队列的实现一般都要依赖于数组"),i("，大家完全可以把栈和队列都看作是“特别的数组”。")],-1),z=s("p",null,[i("（注：实际上，栈和队列作为两种运算受限的"),s("strong",null,"线性表"),i("，用链表来实现也是没问题的。只是从前端面试做题的角度来说，基于链表来实现栈和队列约等于脱裤子放屁（链表实现起来会比数组麻烦得多，做不到开箱即用），基本没人会这么干。这里大家按照数组的思路往下走就行了）")],-1),P=s("strong",null,"增删操作",-1),S=k("",102);function J(w,O,N,I,V,L){const a=p("font");return e(),h("div",null,[x,q,j,z,s("p",null,[i("两者的区别在于，它们各自对数组的"),t(a,{color:"Crimson"},{default:l(()=>[P]),_:1}),i("有着不一样的限制。因此，在学习栈与队列之前，我们需要先来明确一下数组中的增删操作具有什么样的特性、对应的方法有哪些：")]),S])}const R=n(b,[["render",J]]);export{X as __pageData,R as default};
