import{_ as s,c as a,o as e,V as l,m as i}from"./chunks/framework.bW6FiXxS.js";const n="/assets/184637404-4708dda0-ed73-4884-a1bf-81e80d15e4e0.cDOWdsPi.png",v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/FrontEnd/css/1-基础/113-方向裁切 overflow-clip.md","filePath":"knowledge/FrontEnd/css/1-基础/113-方向裁切 overflow-clip.md","lastUpdated":1713919293000}'),t={name:"knowledge/FrontEnd/css/1-基础/113-方向裁切 overflow-clip.md"},p=l(`<h2 id="overflow-clip-为何" tabindex="-1">overflow: clip 为何 <a class="header-anchor" href="#overflow-clip-为何" aria-label="Permalink to &quot;overflow: clip 为何&quot;">​</a></h2><p>首先，简单介绍下 <code>overflow: clip</code> 的用法。</p><p><code>overflow: clip</code>: 与 <code>overflow: hidden</code> 的表现形式极为类似，也是对元素的 <code>padding-box</code> 进行裁剪。</p><p>但是，它们有两点不同：</p><ol><li>也就是 <code>overflow: clip</code> 内部完全禁止任何形式的滚动。当然，这个不是今天的重点，暂且略过不谈。</li></ol><blockquote><p>MDN 原文：The difference between clip and hidden is that the clip keyword also forbids all scrolling, including programmatic scrolling.</p></blockquote><ol><li><code>overflow: clip</code> 可以从 x，y 轴方向上对裁剪进行，控制，而 <code>overflow: hidden</code> 不行。</li></ol><p>重点在于这一点。我们来简单示意一下：</p><h3 id="overflow-clip-overflow-hidden-的表现" tabindex="-1">overflow: clip &amp;&amp; overflow: hidden 的表现 <a class="header-anchor" href="#overflow-clip-overflow-hidden-的表现" aria-label="Permalink to &quot;overflow: clip &amp;&amp; overflow: hidden 的表现&quot;">​</a></h3><p>我们来看对于不区分方向，<code>overflow: clip</code> 与 <code>overflow: hidden</code> 的表现形式：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">p</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">p</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">hidden</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">p</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">p</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#D19A66;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">clip</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">p</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">p</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">hidden</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  overflow</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> hidden</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#D19A66;--shiki-dark:#FFCB6B;">clip</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  overflow</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> clip</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>我们设置了 3 个 DIV 容器，其中一个不设置 overflow，另外两个分别设置 <code>overflow: clip</code> 与 <code>overflow: hidden</code>。效果如下：</p><p><a href="https://user-images.githubusercontent.com/8554143/184637404-4708dda0-ed73-4884-a1bf-81e80d15e4e0.png" target="_blank" rel="noreferrer"><img src="`+n+'" alt="img" loading="lazy"></a></p><p>此时，<code>overflow: clip</code> 与 <code>overflow: hidden</code> 的表现是一致的。</p><h3 id="overflow-clip-在-x-y-轴上可单独设置" tabindex="-1"><code>overflow: clip</code> 在 x/y 轴上可单独设置 <a class="header-anchor" href="#overflow-clip-在-x-y-轴上可单独设置" aria-label="Permalink to &quot;`overflow: clip` 在 x/y 轴上可单独设置&quot;">​</a></h3><p>然而，<code>overflow: clip</code> 的与众不同之处在于，它可以单独设置给 x 轴或者 y 轴，使得容器拥有某一个方向上的裁剪能力，而相对的另外一个方向，允许溢出。</p><p>这里的现象值得注意：</p><ol><li>单单设置 <code>overflow-x: hidden</code> 或者 <code>overflow-y: hidden</code>，表现形式都和 <code>overflow: hidden</code> 一致，是全方位的裁剪</li><li>而水平 x 或竖直 y 方向的 <code>overflow-x: clip</code>/ <code>overflow-y: clip</code> 配合另一个方向的 <code>overflow-x: visible</code>，却能够实现一个方向允许溢出，一个方向实现裁剪！</li></ol><p>需要解释一下上面两点：</p><ol><li>设置 <code>overflow: hidden</code> 就会创建 BFC，因此没法只限制一个方向；而 <code>overflow: clip</code> 不会创建 BFC，因此它们在很多表现上会产生不一致的现象（譬如）</li><li>overflow-x/y 设置为 hidden 时, overflow-y/x 会变成 auto, 即使设置为 visible</li></ol>',21),h=i("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"overflow: hidden & overflow: clip",src:"https://codepen.io/mafqla/embed/QWPmybv?default-tab=html%2Cresult&editable=true&theme-id=light",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/mafqla/pen/QWPmybv">
  overflow: hidden &amp; overflow: clip</a> by mafqla (<a href="https://codepen.io/mafqla">@mafqla</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),o=i("p",null,"至此，我们就实现了这样一种效果，允许元素在 x/y 方向上的单向裁剪，像是这样：",-1),d=i("p",null,"(上图允许 x 轴方向上的溢出，而 y 轴方向进行了裁剪)",-1),k=[p,h,o,d];function r(c,F,B,g,D,y){return e(),a("div",null,k)}const w=s(t,[["render",r]]);export{v as __pageData,w as default};
