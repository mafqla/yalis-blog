import{_ as s,c as a,o as i,V as e}from"./chunks/framework.bW6FiXxS.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/FrontEnd/css/1-icss/12-几个特殊且实用的伪类选择器.md","filePath":"knowledge/FrontEnd/css/1-icss/12-几个特殊且实用的伪类选择器.md","lastUpdated":1715907796000}'),t={name:"knowledge/FrontEnd/css/1-icss/12-几个特殊且实用的伪类选择器.md"},n=e(`<h2 id="_12、几个特殊且实用的伪类选择器-root-target-empty-not" tabindex="-1">12、几个特殊且实用的伪类选择器（<code>:root</code>,<code>:target</code>,<code>:empty</code>,<code>:not</code>） <a class="header-anchor" href="#_12、几个特殊且实用的伪类选择器-root-target-empty-not" aria-label="Permalink to &quot;12、几个特殊且实用的伪类选择器（\`:root\`,\`:target\`,\`:empty\`,\`:not\`）&quot;">​</a></h2><p>每一个 CSS 伪类及伪元素的出现，肯定都是为了解决某些先前难以解决的问题而应运而生的。</p><p>学习了解它们，是解决许多其他复杂 CSS 问题或者前沿技术的基础。</p><p>这里是 4 个基本的结构性伪类选择器，结构性伪类选择器的共同特征是允许开发者根据文档树中的结构来指定元素的样式。</p><h3 id="root-伪类" tabindex="-1"><code>:root</code> 伪类 <a class="header-anchor" href="#root-伪类" aria-label="Permalink to &quot;\`:root\` 伪类&quot;">​</a></h3><p><code>:root</code> 伪类匹配文档树的根元素。应用到 HTML，<code>:root</code> 即表示为<code>&lt;html&gt;</code>元素，除了优先级更高外，相当于 html 标签选择器。</p><h4 id="语法样式" tabindex="-1">语法样式 <a class="header-anchor" href="#语法样式" aria-label="Permalink to &quot;语法样式&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span>:root { 样式属性 }</span></span></code></pre></div><p>譬如，<code>:root{background:#000}</code> ，即可将页面背景色设置为黑色。</p><p>由于属于 CSS3 新增的伪类，所以也可以作为一种 HACK 元素，只对 IE9+ 生效。</p><p>介绍 <code>:root</code> 伪类，是因为在介绍使用 <code>CSS变量</code> 的时候，声明全局 CSS 变量时 <code>:root</code> 很有用。</p><h3 id="empty-伪类" tabindex="-1"><code>:empty</code> 伪类 <a class="header-anchor" href="#empty-伪类" aria-label="Permalink to &quot;\`:empty\` 伪类&quot;">​</a></h3><p><code>:empty</code> 伪类，代表没有子元素的元素。 这里说的子元素，只计算元素结点及文本（包括空格），注释、运行指令不考虑在内。</p><p>考虑一个例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span>div{</span></span>
<span class="line"><span>  height:20px;</span></span>
<span class="line"><span>  background:#ffcc00;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>div:empty{</span></span>
<span class="line"><span>  display:none;</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span>&lt;div&gt;1&lt;/div&gt;</span></span>
<span class="line"><span>&lt;div&gt; &lt;/div&gt;</span></span>
<span class="line"><span>&lt;div&gt;&lt;/div&gt;</span></span></code></pre></div><p>上述的例子，前两个 div 会正常显示，而第三个则会 <code>display:none</code> 隐藏。</p><p>也就是说，要想 <code>:empty</code> 生效，标签中连哪怕一个空格都不允许存在。</p><p>[Demo 戳我：<a href="http://codepen.io/Chokcoco/pen/VmvWpG" target="_blank" rel="noreferrer">:empty 结构性伪类示例</a>]</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-rn6Wu" id="tab-OUfHkof" checked="checked"><label for="tab-OUfHkof">html</label><input type="radio" name="group-rn6Wu" id="tab-OIY1sFk"><label for="tab-OIY1sFk">scss</label></div><div class="blocks"><div class="language-html vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> &lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;&lt;/</span><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  height</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">20</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  background</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#89DDFF;">#</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">ffcc00</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  margin-bottom</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;">10</span><span style="--shiki-light:#E06C75;--shiki-dark:#F78C6C;">px</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#C792EA;">empty</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  display</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;">none</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></div></div><h3 id="not-伪类" tabindex="-1"><code>:not</code> 伪类 <a class="header-anchor" href="#not-伪类" aria-label="Permalink to &quot;\`:not\` 伪类&quot;">​</a></h3><p>CSS 否定伪类，<code>:not(X)</code>，可以选择除某个元素之外的所有元素。</p><p>X 不能包含另外一个否定选择器。</p><p>关于 <code>:not</code> 伪类有几个有趣的现象：</p><ul><li><code>:not</code> 伪类不像其它伪类，它不会增加选择器的优先级。它的优先级即为它参数选择器的优先级。</li></ul><blockquote><p>我们知道，选择器是有优先级之分的，通常而言，伪类选择的权重与类选择器（class selectors，例如 <code>.example</code>），属性选择器（attributes selectors，例如 <code>[type=&quot;radio&quot;]</code>）的权重相同，但是有一个特例，就是 <code>:not()</code>。<code>:not</code> 否定伪类在优先级计算中不会被看作是伪类，但是在计算选择器数量时还是会把其中的选择器当做普通选择器进行计数。</p></blockquote><ul><li>使用 <code>:not(*)</code> 将匹配任何非元素的元素，因此这个规则将永远不会被应用。</li><li>这个选择器只会应用在一个元素上， 你不能用它在排除所有祖先元素。 举例来说， body :not(table) a 将依旧会应用在 table 内部的<code>&lt;a&gt;</code> 上, 因为 <code>&lt;tr&gt;</code>将会被:not() 这部分选择器匹配。（摘自<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:not" target="_blank" rel="noreferrer">MDN</a>）</li></ul><h3 id="target-伪类" tabindex="-1"><code>:target</code> 伪类 <a class="header-anchor" href="#target-伪类" aria-label="Permalink to &quot;\`:target\` 伪类&quot;">​</a></h3><p><code>:target</code> 伪类，在 <code>#8、纯CSS的导航栏Tab切换方案</code> 中已经实践过了，可以回过头看看。</p><p><code>:target</code> 代表一个特殊的元素，若是谈论区别的话，它需要一个 id 去匹配文档 URI 的片段标识符。</p><p><code>:target</code> 选择器的出现，让 CSS 也能够接受到用户的点击事件，并进行反馈。（另一个可以接收点击事件的 CSS 选择器是 <code>:checked</code>）。</p>`,31),p=[n];function l(o,d,h,c,r,k){return i(),a("div",null,p)}const F=s(t,[["render",l]]);export{B as __pageData,F as default};
