import{_ as e,o as a,c as t,U as i,k as s}from"./chunks/framework.5FtAyiyV.js";const o="/assets/d8350772-f3a1-11e6-9ef9-f8cf3df16ffe.zeYXhWBy.png",n="/assets/d74295c2-f3a2-11e6-9c09-f75f30b017bd.TFnKyIfI.png",p="/assets/97af8828-f39f-11e6-82db-55405160eea3.kJ3vS9dA.gif",l="/assets/7dabb642-f3a7-11e6-8eba-e48cc56642dc.sTe0Gouq.gif",c="/assets/c0cfee66-f3a7-11e6-995b-0b497360ca2b.WjtawUfG.gif",h="/assets/9a4707d6-f3a5-11e6-82b2-2e6c5f95a706.yJ3Mzs-G.gif",x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/FrontEnd/css/1-基础/18-使用(position-sticky )实现粘性布局.md","filePath":"knowledge/FrontEnd/css/1-基础/18-使用(position-sticky )实现粘性布局.md","lastUpdated":1704935885000}'),r={name:"knowledge/FrontEnd/css/1-基础/18-使用(position-sticky )实现粘性布局.md"},d=i(`<p>问，CSS 中 position 属性的取值有几个？ 大部分人的回答是，大概是下面这几个吧？</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> static</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> relative</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> absolute</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> fixed</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>额，其实，我们还可以有这 3 个取值：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  /* 全局值 */</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> inherit</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> initial</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> unset</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>没了吗？偶然发现其实还有一个处于实验性的取值，<code>position:sticky</code>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noreferrer">戳我查看 MDN 解释</a>）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    position: sticky;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="初窥-position-sticky" tabindex="-1">初窥 <code>position:sticky</code> <a class="header-anchor" href="#初窥-position-sticky" aria-label="Permalink to &quot;初窥 \`position:sticky\`&quot;">​</a></h2><p>sticky 英文字面意思是<strong>粘，粘贴</strong>，所以姑且称之为粘性定位。下面就来了解下这个处于实验性的取值的具体功能及实用场景。</p><p>这是一个结合了 <code>position:relative</code> 和 <code>position:fixed</code> 两种定位功能于一体的特殊定位，适用于一些特殊场景。</p><p>什么是结合两种定位功能于一体呢？</p><p>元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。</p><p>而后，元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。</p><p>这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p><h2 id="不乐观的兼容性" tabindex="-1">不乐观的兼容性 <a class="header-anchor" href="#不乐观的兼容性" aria-label="Permalink to &quot;不乐观的兼容性&quot;">​</a></h2><p>在讲述具体示例之前，还是很有必要了解一下 <code>position:sticky</code> 的兼容性，嗯，不乐观的兼容性。</p><p>看看 <a href="http://caniuse.com/#feat=css-sticky" target="_blank" rel="noreferrer">CANIUSE</a> 下的截图：</p><p><img src="`+o+'" alt="image" loading="lazy"></p><p>IOS 家族（SAFARI &amp;&amp; IOS SAFARI）和 Firefox 很早开始就支持 <code>position:sticky</code> 了。而 Chrome53~55 则需要启用实验性网络平台功能才行。其中 webkit 内核的要添加上私有前缀 <code>-webkit-</code>。</p><h3 id="chrome-53-55-开启-enable-experimental-web-platform-features" tabindex="-1">Chrome 53~55 开启 #enable-experimental-web-platform-features <a class="header-anchor" href="#chrome-53-55-开启-enable-experimental-web-platform-features" aria-label="Permalink to &quot;Chrome 53~55 开启 #enable-experimental-web-platform-features&quot;">​</a></h3><p>地址栏输入 <code>chrome://flags/</code> ，找到 <code>enable-experimental-web-platform-features</code> ，选择启用：</p><p><img src="'+n+'" alt="image" loading="lazy"></p><p>所以下面的 CodePen 示例，需要上述几个浏览器下观看。</p><h2 id="position-sticky-示例" tabindex="-1"><code>position:sticky</code> 示例 <a class="header-anchor" href="#position-sticky-示例" aria-label="Permalink to &quot;`position:sticky` 示例&quot;">​</a></h2><p>嗯，上面的文字描述估计还是很难理解，看看下面这张 GIF 图，想想要实现的话，使用 JS + CSS 的方式该如何做：</p><p><img src="'+p+'" alt="sticky" loading="lazy"> 按照常规做法，大概是监听页面 scroll 事件，判断每一区块距离视口顶部距离，超过了则设定该区块 <code>position:fixed</code>，反之去掉。</p><p>而使用 <code>position:sticky</code> ，则可以非常方便的实现（请在 SAFARI 或者 CHROME53+ 下观看）：</p>',26),k=s("iframe",{height:"265",scrolling:"no",title:"positionSticky",src:"//codepen.io/Chokcoco/embed/XpGjJg/?height=265&theme-id=0&default-tab=css,result&embed-version=2",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},"See the Pen positionSticky by Chokcoco (@Chokcoco) on CodePen. ",-1),B=i(`<p>嗯，看看上面的 CSS 代码，只需要给每个内容区块加上</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;"> -webkit-sticky</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  position</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#BABED8;"> sticky</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#B2CCD6;">  top</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>就可以轻松实现了。</p><p>简单描述下生效过程，因为设定的阈值是 <code>top:0</code> ，这个值表示当元素距离页面视口（Viewport，也就是 fixed 定位的参照）顶部距离大于 0px 时，元素以 relative 定位表现，而当元素距离页面视口小于 0px 时，元素表现为 fixed 定位，也就会固定在顶部。</p><p>不理解可以再看看下面这两张示意图（top:20px 的情况，取自开源项目<a href="https://github.com/filamentgroup/fixed-sticky" target="_blank" rel="noreferrer">fixed-sticky</a>）：</p><h4 id="距离页面顶部大于-20px-表现为-position-relative" tabindex="-1">距离页面顶部大于 20px，表现为 <code>position:relative</code>; <a class="header-anchor" href="#距离页面顶部大于-20px-表现为-position-relative" aria-label="Permalink to &quot;距离页面顶部大于 20px，表现为 \`position:relative\`;&quot;">​</a></h4><p><img src="`+l+'" alt="sticky-top-off" loading="lazy"></p><h4 id="距离页面顶部小于-20px-表现为-position-fixed" tabindex="-1">距离页面顶部小于 20px，表现为 <code>position:fixed</code>; <a class="header-anchor" href="#距离页面顶部小于-20px-表现为-position-fixed" aria-label="Permalink to &quot;距离页面顶部小于 20px，表现为 `position:fixed`;&quot;">​</a></h4><p><img src="'+c+'" alt="sticky-top-on" loading="lazy"></p><h3 id="运用-position-sticky-实现头部导航栏固定" tabindex="-1">运用 <code>position:sticky</code> 实现头部导航栏固定 <a class="header-anchor" href="#运用-position-sticky-实现头部导航栏固定" aria-label="Permalink to &quot;运用 `position:sticky` 实现头部导航栏固定&quot;">​</a></h3><p>运用 <code>position:sticky</code> 实现导航栏固定，也是最常见的用法：</p><p><img src="'+h+'" alt="stickynav" loading="lazy"></p>',12),y=s("iframe",{height:"265",scrolling:"no",title:"stickyNav",src:"//codepen.io/Chokcoco/embed/OWqpjJ/?height=265&theme-id=0&default-tab=css,result&embed-version=2",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},"See the Pen stickyNav  ",-1),g=i('<p>同理，也可以实现侧边导航栏的超出固定。</p><h2 id="生效规则" tabindex="-1">生效规则 <a class="header-anchor" href="#生效规则" aria-label="Permalink to &quot;生效规则&quot;">​</a></h2><p><code>position:sticky</code> 的生效是有一定的限制的，总结如下：</p><ol><li>须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。 <ul><li>并且 <code>top</code> 和 <code>bottom</code> 同时设置时，<code>top</code> 生效的优先级高，<code>left</code> 和 <code>right</code> 同时设置时，<code>left</code> 的优先级高。</li></ul></li><li>设定为 <code>position:sticky</code> 元素的任意父节点的 overflow 属性必须是 visible，否则 <code>position:sticky</code> 不会生效。这里需要解释一下： <ul><li>如果 <code>position:sticky</code> 元素的任意父节点定位设置为 <code>position:overflow</code>，则父容器无法进行滚动，所以 <code>position:sticky</code> 元素也不会有滚动然后固定的情况。</li><li>如果 <code>position:sticky</code> 元素的任意父节点定位设置为 <code>position:relative | absolute | fixed</code>，则元素相对父元素进行定位，而不会相对 viewprot 定位。</li></ul></li><li>达到设定的阀值。这个还算好理解，也就是设定了 <code>position:sticky</code> 的元素表现为 <code>relative</code> 还是 <code>fixed</code> 是根据元素是否达到设定了的阈值决定的。</li></ol><h2 id="开始使用" tabindex="-1">开始使用？ <a class="header-anchor" href="#开始使用" aria-label="Permalink to &quot;开始使用？&quot;">​</a></h2><p>上面从兼容性也看到了，情况不容乐观，但是用于某些布局还是能省很多力的，如果真的希望用上这个属性，可以采用一些开源库来实现兼容。</p><p>推荐 <a href="https://github.com/filamentgroup/fixed-sticky" target="_blank" rel="noreferrer">fixed-sticky</a> 。</p>',7),F=[d,k,B,y,g];function f(_,m,D,b,A,u){return a(),t("div",null,F)}const v=e(r,[["render",f]]);export{x as __pageData,v as default};
