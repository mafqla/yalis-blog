import{_ as n}from"./chunks/ArticleMetadata.uaIStb0i.js";import{_ as e,c as k,J as r,w as F,m as l,a as d,V as o,E as D,o as t,b as B,e as c}from"./chunks/framework.YbGCv4uC.js";import"./chunks/theme.uu_ea-RX.js";import"./chunks/index.YGyFk2XV.js";const g="/assets/image-20220711173316537.DwD1mtpt.png",R=JSON.parse('{"title":"webpack 开发服务器","description":"","frontmatter":{"title":"webpack 开发服务器","date":"2022-8-21 18:51","tags":["webpack"]},"headers":[],"relativePath":"knowledge/build-tools/01-webpack/04-webpackService.md","filePath":"knowledge/build-tools/01-webpack/04-webpackService.md","lastUpdated":1706749039000}'),y={name:"knowledge/build-tools/01-webpack/04-webpackService.md"},C=l("h1",{id:"_4-webpack-开发服务器",tabindex:"-1"},[d("4. webpack 开发服务器 "),l("a",{class:"header-anchor",href:"#_4-webpack-开发服务器","aria-label":'Permalink to "4. webpack 开发服务器"'},"​")],-1),u=o(`<h2 id="_4-0-webpack-开发服务器-为何学" tabindex="-1">4.0_webpack 开发服务器-为何学? <a class="header-anchor" href="#_4-0-webpack-开发服务器-为何学" aria-label="Permalink to &quot;4.0_webpack 开发服务器-为何学?&quot;">​</a></h2><p>文档地址: <a href="https://webpack.docschina.org/configuration/dev-server/" target="_blank" rel="noreferrer">https://webpack.docschina.org/configuration/dev-server/</a></p><p>抛出问题: 每次修改代码, 都需要重新 yarn build 打包, 才能看到最新的效果, 实际工作中, 打包 yarn build 非常费时 (30s - 60s) 之间</p><p>为什么费时?</p><ol><li>构建依赖</li><li>磁盘读取对应的文件到内存, 才能加载</li><li>用对应的 loader 进行处理</li><li>将处理完的内容, 输出到磁盘指定目录</li></ol><p>解决问题: 起一个开发服务器, 在电脑内存中打包, 缓存一些已经打包过的内容, 只重新打包修改的文件, 最终运行加载在内存中给浏览器使用</p><h2 id="_4-1-webpack-watch-的配置" tabindex="-1">4.1 Webpack watch 的配置 <a class="header-anchor" href="#_4-1-webpack-watch-的配置" aria-label="Permalink to &quot;4.1 Webpack watch 的配置&quot;">​</a></h2><ul><li><p>webpack 给我们提供了 watch 模式：</p><ul><li><p>在该模式下，webpack 依赖图中的所有文件，只要有一个发生了更新，那么代码将被重新编译；</p></li><li><p>我们不需要手动去运行 npm run build 指令了；</p></li></ul></li><li><p>如何开启 watch 呢？两种方式：</p><ul><li><p>方式一：在导出的配置中，添加 watch: true；</p></li><li><p>方式二：在启动 webpack 的命令中，添加 --watch 的标识；</p></li></ul></li><li><p>这里我们选择方式二，在 package.json 的 scripts 中添加一个 watch 的脚本：</p><ul><li><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">scripts</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#C792EA;">build</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">webpack --config wk.config.js</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#C792EA;">watch</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">webpack --watch</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#C792EA;">type-check</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">tsc --noEmit</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#C792EA;">type-check-watch</span><span style="--shiki-light:#E06C75;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">npm run type-check --  --watch</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#BABED8;">,</span></span></code></pre></div></li></ul></li></ul><h2 id="_4-2-webpack-dev-server-自动刷新" tabindex="-1">==4.2 webpack-dev-server 自动刷新== <a class="header-anchor" href="#_4-2-webpack-dev-server-自动刷新" aria-label="Permalink to &quot;==4.2 webpack-dev-server 自动刷新==&quot;">​</a></h2><blockquote><p>目标: 启动本地服务, 可实时更新修改的代码, 打包<strong>变化代码</strong>到内存中, 然后直接提供端口和网页访问</p></blockquote><ol><li><p>下载包</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#FFCB6B;">yarn</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> add</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> webpack-dev-server</span><span style="--shiki-light:#D19A66;--shiki-dark:#C3E88D;"> -D</span></span></code></pre></div></li><li><p>配置自定义命令</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">scripts</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">	&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">build</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">: </span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">webpack</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">	&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">serve</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">: </span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">webpack serve</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></li><li><p>运行命令-启动 webpack 开发服务器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#FFCB6B;">yarn</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;"> serve</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#或者 npm run serve</span></span></code></pre></div></li></ol><blockquote><p>总结: 以后改了 src 下的资源代码, 就会直接更新到内存打包, 然后反馈到浏览器上了</p></blockquote><h2 id="_4-3-webpack-dev-server-配置" tabindex="-1">4.3 webpack-dev-server 配置 <a class="header-anchor" href="#_4-3-webpack-dev-server-配置" aria-label="Permalink to &quot;4.3 webpack-dev-server 配置&quot;">​</a></h2><ol><li><p>在 webpack.config.js 中添加服务器配置</p><p>更多配置参考这里: <a href="https://webpack.docschina.org/configuration/dev-server/#devserverafter" target="_blank" rel="noreferrer">https://webpack.docschina.org/configuration/dev-server/#devserverafter</a></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#89DDFF;">module</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#89DDFF;">exports</span><span style="--shiki-light:#56B6C2;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // ...其他配置</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">  devServer</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">    port</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 3000</span><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 端口号</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></li></ol><h2 id="_4-4-什么是模块热替换-hmr" tabindex="-1">4.4 什么是模块热替换（HMR） <a class="header-anchor" href="#_4-4-什么是模块热替换-hmr" aria-label="Permalink to &quot;4.4 什么是模块热替换（HMR）&quot;">​</a></h2><ul><li><p>什么是 HMR 呢？</p></li><li><p>HMR 的全称是 Hot Module Replacement，翻译为模块热替换；</p></li><li><p>模块热替换是指在 应用程序运行过程中，替换、添加、删除模块，而无需重新刷新整个页面；</p></li><li><p>HMR 通过如下几种方式，来提高开发的速度：</p><ul><li><p>不重新加载整个页面，这样可以保留某些应用程序的状态不丢失；</p></li><li><p>只更新需要变化的内容，节省开发的时间；</p></li><li><p>修改了 css、js 源代码，会立即在浏览器更新，相当于直接在浏览器的 devtools 中直接修改样式；</p></li></ul></li><li><p>如何使用 HMR 呢？</p><ul><li>默认情况下，webpack-dev-server 已经支持 HMR，我们只需要开启即可；</li><li>修改 webpack 的配置文件</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">devServer</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:{</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    hot</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#FF9CAC;">true</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">},</span></span></code></pre></div><ul><li>在不开启 HMR 的情况下，当我们修改了源代码之后，整个页面会自动刷新，使用的是 live reloading；</li></ul></li></ul><h2 id="_4-5-hmr-原理" tabindex="-1">4.5 HMR 原理 <a class="header-anchor" href="#_4-5-hmr-原理" aria-label="Permalink to &quot;4.5 HMR 原理&quot;">​</a></h2><ul><li><p>那么 HMR 的原理是什么呢？如何可以做到只更新一个模块中的内容呢？</p><ul><li><p>webpack-dev-server 会创建两个服务：提供静态资源的服务（express）和 Socket 服务（net.Socket）；</p></li><li><p>express server 负责直接提供静态资源的服务（打包后的资源直接被浏览器请求和解析）；</p></li></ul></li><li><p>HMR Socket Server，是一个 socket 的长连接：</p><ul><li><p>长连接有一个最好的好处是建立连接后双方可以通信（服务器可以直接发送文件到客户端）；</p></li><li><p>当服务器监听到对应的模块发生变化时，会生成两个文件.json（manifest 文件）和.js 文件（update chunk）；</p></li><li><p>通过长连接，可以直接将这两个文件主动发送给客户端（浏览器）；</p></li><li><p>浏览器拿到两个新的文件后，通过 HMR runtime 机制，加载这两个文件，并且针对修改的模块进行更新；</p></li></ul></li></ul><p><code>原理图:</code></p><p><img src="`+g+`" alt="image-20220711173316537" loading="lazy"></p><p><code>Proxy:</code></p><ul><li><p>proxy 是我们开发中非常常用的一个配置选项，它的目的设置代理来解决跨域访问的问题：</p><ul><li><p>比如我们的一个 api 请求是 <a href="http://localhost:8888" target="_blank" rel="noreferrer">http://localhost:8888</a>，但是本地启动服务器的域名是 <a href="http://localhost:8000" target="_blank" rel="noreferrer">http://localhost:8000</a>，这 个时候发送网络请求就会出现跨域的问题；</p></li><li><p>那么我们可以将请求先发送到一个代理服务器，代理服务器和 API 服务器没有跨域的问题，就可以解决我们的跨 域问题了；</p></li></ul></li><li><p>我们可以进行如下的设置：</p><ul><li><p>target：表示的是代理到的目标地址，比如 /api-hy/moment 会被代理到 <a href="http://localhost:8888/api-hy/moment%EF%BC%9B" target="_blank" rel="noreferrer">http://localhost:8888/api-hy/moment；</a></p></li><li><p>pathRewrite：默认情况下，我们的 /api-hy 也会被写入到 URL 中，如果希望删除，可以使用 pathRewrite；</p></li><li><p>secure：默认情况下不接收转发到 https 的服务器上，如果希望支持，可以设置为 false；</p></li><li><p>changeOrigin：它表示是否更新代理后请求的 headers 中 host 地址；</p></li></ul><p><code>详细代码:</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">  devServer</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    contentBase</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">./public</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    hot</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#FF9CAC;"> true</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    host</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">0.0.0.0</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    port</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#F78C6C;"> 7777</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    open</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#FF9CAC;"> true</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-dark:#676E95;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // compress: true,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    proxy</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">      &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">/api</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">: </span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">        target</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">http://localhost:8888</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">        pathRewrite</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">          &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#F07178;">^/api</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">        },</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">        secure</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#FF9CAC;"> false</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#F07178;">        changeOrigin</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#D19A66;--shiki-dark:#FF9CAC;"> true</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">      }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  },</span></span></code></pre></div></li></ul><p><code>alias配置：</code></p><ul><li>特别是当我们项目的目录结构比较深的时候，或者一个文件的路径可能需要 ../../../这种路径片段；</li><li>我们可以给某些常见的路径起一个别名；</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro material-theme-palenight vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">  resolve</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    extensions</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;"> [</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">.js</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">.json</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">.mjs</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">.vue</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">.ts</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">.jsx</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">.tsx</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">]</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#FFCB6B;">    alias</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">      &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">@</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">path</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">resolve</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">__dirname</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">./src</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">      &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">js</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#BABED8;">path</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#82AAFF;">resolve</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#BABED8;">__dirname</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#98C379;--shiki-dark:#C3E88D;">./src/js</span><span style="--shiki-light:#98C379;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#F07178;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#89DDFF;">  },</span></span></code></pre></div>`,25);function A(s,b,v,E,m,q){const p=n,h=D("ClientOnly");return t(),k("div",null,[C,r(h,null,{default:F(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),B(p,{key:0,article:s.$frontmatter,readTime:2,words:397},null,8,["article"])):c("",!0)]}),_:1}),u])}const x=e(y,[["render",A]]);export{R as __pageData,x as default};
